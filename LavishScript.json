{
  "$schema": "http://www.lavishsoft.com/schema/ls1APISpec.json",
  "name": "LavishScript",
  "description": "LavishScript base API",
  "definitions":{
    "select":{
      "properties":{
        "member":{
          "type":"string",
          "description":"Name of a Member of the object being tested, to use for all properties (eval, op, with)"
        },
        "args":{
          "type":"array",
          "description":"Optional array of arguments to pass to the specified member"
        },
        "eval":{
          "type":"string",
          "description":"A LavishScript data sequence specifying a different object to test; use Select to refer to the current object (e.g. \"Select.Get[id]\")"
        },
        "op":{
          "type":"string",
          "description":"A test (or series of tests, in the case of && and ||) to perform to determine if the object matches the Select query. The specified op will then require `value`, `list`, or `select`.",
          "enum":["==","!=","<","<=",">",">=","!","&&","||"]
        },
        "with":{
          "type":"array",
          "description":"A list of additional tests, if op succeeds (or is not present)",
          "items":{
            "$ref":"#/definitions/select"
          }
        },
        "limit":{
          "type":"integer",
          "description":"A maximum number of matching results, used for SelectKeys/SelectValues"
        },
        "n":{
          "type":"integer",
          "description":"Used to select the nth matching result, used for SelectKey/SelectValue"
        },
        "value":{
          "description":"A value to test the object against, for the following ops: == != < <= > >="
        },
        "list":{
          "type":"array",
          "description":"A list of additional tests, for the following ops: && ||",
          "items":{
            "$ref":"#/definitions/select"  
          }
        },
        "select":{
          "allOf":[
            {
              "$ref":"#/definitions/select"
            }
          ],
          "description":"A specified test, for the following ops: !"
        }       
      }
    }
  },
  "commands": {
    "Test": {},
    "Commands": {},
    "Alias": {},
    "LSVersion": {},
    "Redirect": {},
    "DeclareVariable": {
      "forms": [
        {
          "parameters": [
            {
              "parameterGroup": [
                {
                  "type": "string",
                  "name": "varName"
                },
                {
                  "type": "string",
                  "name": "varName[... uint arrayExtents]"
                }
              ]
            },
            {
              "type": "string",
              "name": "typeName",
              "optional": true,
              "default": "string"
            },
            {
              "type": "string",
              "name": "scope",
              "enum": [
                "globalkeep",
                "global",
                "script",
                "object",
                "local"
              ]
            },
            {
              "type": "string",
              "name": "initialValue"
            }
          ]
        }
      ]
    },
    "DeleteVariable": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "name": "varName"
            }
          ]
        }
      ]
    },
    "RunScript": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "name": "filename"
            },
            {
              "type": "string",
              "greedy": true,
              "optional": true,
              "name": "scriptParams"
            }
          ]
        }
      ]
    },
    "EndScript": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "name": "filename"
            }
          ]
        },
        {
          "parameters": [
            {
              "type": "string",
              "constant": "*"
            }
          ]
        }
      ]
    },
    "Execute": {},
    "OSExecute": {
      "restricted": true
    },
    "Return": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "greedy": true,
              "optional": true,
              "name": "returnObjectInitParams"
            }
          ]
        }
      ]
    },
    "Call": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "name": "functionName"
            },
            {
              "type": "string",
              "greedy": true,
              "optional": true,
              "name": "functionParams"
            }
          ]
        }
      ]
    },
    "Wait": {
      "forms": [
        {
          "parameters": [
            {
              "parameterGroup": [
                {
                  "type": "uint",
                  "name": "deciseconds"
                },
                {
                  "type": "string",
                  "constant": "-s",
                  "followingParameters": [
                    {
                      "type": "float",
                      "name": "seconds"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bool",
              "optional": true,
              "name": "pauseUntilExpression"
            }
          ]
        }
      ]
    },
    "WaitScript": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "name": "filename"
            },
            {
              "type": "string",
              "greedy": true,
              "name": "scriptParams"
            }
          ]
        }
      ]
    },
    "ExecuteFile": {
      "restricted": true
    },
    "Cat": {
      "restricted": true
    },
    "Head": {
      "restricted": true
    },
    "Tail": {
      "restricted": true
    },
    "Line": {
      "restricted": true
    },
    "cd": {
      "restricted": true
    },
    "mkdir": {
      "restricted": true,
      "forms": [
        {
          "parameters": [
            {
              "name": "path",
              "type": "string"
            }
          ]
        }
      ]
    },
    "rmdir": {
      "restricted": true
    },
    "rename": {
      "restricted": true
    },
    "rm": {
      "restricted": true
    },
    "cp": {
      "restricted": true
    },
    "Arg": {},
    "WaitFrame": {
      "forms": [
        {}
      ]
    },
    "Scripts": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "enum": [
                "-running",
                "-available"
              ]
            }
          ]
        }
      ]
    },
    "LSType": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "constant": "-list"
            }
          ]
        },
        {
          "parameters": [
            {
              "type": "string",
              "string": "name"
            }
          ]
        }
      ]
    },
    "TopLevelObject": {
      "forms": [
        {}
      ]
    },
    "TimedCommand": {},
    "QueueCommand": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "greedy": true,
              "name": "command"
            }
          ]
        }
      ]
    },
    "ExecuteQueued": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "name": "needle",
              "optional": true
            }
          ]
        }
      ]
    },
    "FlushQueued": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "name": "needle",
              "optional": true
            }
          ]
        }
      ]
    },
    "NoOp": {},
    "Turbo": {
      "forms": [
        {
          "parameters": [
            {
              "type": "uint",
              "name": "maxCommandsPerPulse",
              "default": 150,
              "optional": true
            }
          ]
        }
      ]
    },
    "Module": {
      "restricted": true
    },
    "APICall": {
      "restricted": true
    },
    "Processor": {},
    "ExecuteAtom": {},
    "AddAtom": {},
    "DeleteAtom": {},
    "Squelch": {
      "forms": [
        {
          "parameters": [
            {
              "type":"string",
              "greedy": true,
              "name": "command"
            }
          ]
        }
      ]
    },
    "Echo": {
      "forms": [
        {
          "parameters": [
            {
              "type":"string",
              "greedy": true,
              "name": "text"
            }
          ]
        }
      ]
    },
    "AddTrigger": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "name": "functionName"
            },
            {
              "type": "string",
              "name": "needle"
            }
          ]
        }
      ]
    },
    "RemoveTrigger": {
      "forms": [
        {
          "parameters": [
            {
              "type": "string",
              "name": "functionName"
            }
          ]
        }
      ]
    },
    "WaitFor": {
      "forms": [
        {
          "parameters": [
            {
              "type":"string",
              "greedy": true,
              "name": "upTo20needles"
            },
            {
              "type":"uint",
              "optional": true,
              "name": "maxWaitDeciseconds"
            }
          ]
        }
      ]
    }
  },
  "events": {
    "Alias Added": {
      "description": ""
    },
    "Alias Removed": {
      "description": ""
    },
    "Command Added": {
      "description": ""
    },
    "Command Removed": {
      "description": ""
    },
    "Object Type Added": {
      "description": ""
    },
    "Object Type Removed": {
      "description": ""
    },
    "Top-Level Object Added": {
      "description": ""
    },
    "Top-Level Object Removed": {
      "description": ""
    },
    "Fatal Error": {
      "description": ""
    },
    "Data Sequence Error": {
      "description": ""
    }
  },
  "types": {
    "int": {
      "members": {
        "Inc":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "int",
              "description": "Returns this int, plus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Dec":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "int",
              "description": "Returns this int, minus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Float": {
          "forms": [
            {
              "type": "float",
              "description": "This number, converted to a float"
            }
          ]
        },
        "Hex": {
          "forms": [
            {
              "type": "string",
              "description": "A hexadecimal string equivalent to this number"
            }
          ]
        },
        "LeadingZeroes": {
          "forms": [
            {
              "type": "string",
              "description": "A string representation of this number, with at least this many decimal places.  The number will be lead with zeroes to reach the desired length",
              "parameters": [
                {
                  "name": "digits",
                  "type": "uint"
                }
              ]
            }
          ]
        },
        "Reverse": {
          "forms": [
            {
              "type": "int",
              "description": "This number, with its bytes reversed (1234 is turned into 3523477504.. easier to see in hex: 00 00 04 D2 -> D2 04 00 00)"
            }
          ]
        },
        "Between": {
          "forms": [
            {
              "type": "bool",
              "minimumBuild": 6779,
              "description": "TRUE if   a<= value and value <= b",
              "parameters": [
                {
                  "type": "int"
                },
                {
                  "type": "int"
                }
              ]
            }
          ]
        },
        "Unsigned": {
          "forms": [
            {
              "type": "uint",
              "description": "This number as 32-bit unsigned"
            }
          ]
        },
        "Equal": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the int matches the specified value",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int"
                }
              ]
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "string",
              "description": "A string with the value of the int, as would be in JSON"
            }
          ]
        }
      },
      "methods": {
        "Reverse": {
          "forms": [
            {}
          ]
        },
        "Inc": {
          "forms": [
            {
              "description": "Increments this int by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Increments this int by 1"
            }
          ]
        },
        "Dec": {
          "forms": [
            {
              "description": "Decrements this int by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Decrements this int by 1"
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "description": "Sets this int to a given value",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int"
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "Min":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"int"
            }
          ]
        },
        "Max":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"int"
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "value",
                "type": "int",
                "optional": true,
                "default":0
              }
            ]
          }
        ]
      },
      "persistent": false,
      "category": "Numeric",
      "asString": {}
    },
    "uint": {
      "members": {
        "Inc":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "uint",
              "description": "Returns this uint, plus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "uint",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Dec":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "uint",
              "description": "Returns this uint, minus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "uint",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Float": {
          "forms": [
            {
              "type": "float",
              "description": "This number, converted to a float"
            }
          ]
        },
        "Hex": {
          "forms": [
            {
              "type": "string",
              "description": "A hexadecimal string equivalent to this number"
            }
          ]
        },
        "LeadingZeroes": {
          "forms": [
            {
              "type": "string",
              "description": "A string representation of this number, with at least this many decimal places.  The number will be lead with zeroes to reach the desired length",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Reverse": {
          "forms": [
            {
              "type": "uint",
              "description": "This number, with its bytes reversed (1234 is turned into 3523477504.. easier to see in hex: 00 00 04 D2 -> D2 04 00 00)"
            }
          ]
        },
        "Between": {
          "forms": [
            {
              "type": "bool",
              "minimumBuild": 6779,
              "description": "TRUE if   a<= value and value <= b",
              "parameters": [
                {
                  "type": "int"
                },
                {
                  "type": "int"
                }
              ]
            }
          ]
        },
        "Signed": {
          "forms": [
            {
              "type": "int",
              "description": "This number as 32-bit signed"
            }
          ]
        },
        "Equal": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the uint matches the specified value",
              "parameters": [
                {
                  "type": "formula"
                }
              ]
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "string",
              "description": "A string with the value of the uint, as would be in JSON"
            }
          ]
        }
      },
      "methods": {
        "Reverse": {},
        "Inc": {
          "forms": [
            {
              "description": "Increments this uint by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "uint",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Increments this uint by 1"
            }
          ]
        },
        "Dec": {
          "forms": [
            {
              "description": "Decrements this uint by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "uint",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Decrements this uint by 1"
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "description": "Sets this uint to a given value",
              "parameters": [
                {
                  "type": "formula"
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "Min":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"uint"
            }
          ]
        },
        "Max":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"uint"
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "value",
                "type": "uint",
                "optional": true,
                "default":0
              }
            ]
          }
        ]
      },
      "persistent": false,
      "category": "Numeric",
      "asString": {}
    },
    "string": {
      "variableType": "mutablestring",
      "members": {
        "Mid": {
          "forms": [
            {
              "type": "string",
              "description": "Returns a string containing the given length at the given position (1-based) of the original string",
              "parameters": [
                {
                  "name": "position",
                  "type": "uint"
                },
                {
                  "name": "length",
                  "type": "uint"
                }
              ]
            }
          ]
        },
        "Left": {
          "forms": [
            {
              "type": "string",
              "description": "Returns a string containing the leftmost # characters of the original string. A negative number can be used to give the leftmost (Length-#)",
              "parameters": [
                {
                  "name": "length",
                  "type": "int"
                }
              ]
            }
          ]
        },
        "Right": {
          "forms": [
            {
              "type": "string",
              "description": "Returns a string containing the rightmost # characters of the original string. A negative number can be used to give the rightmost (Length-#)",
              "parameters": [
                {
                  "name": "length",
                  "type": "int"
                }
              ]
            }
          ]
        },
        "Find": {
          "forms": [
            {
              "type": "int64",
              "description": "Returns the 1-based position of a given substring in the original string, or NULL",
              "parameters": [
                {
                  "name": "needle",
                  "type": "string"
                }
              ]
            },
            {
              "minimumBuild":7015,
              "type":"int64",
              "description": "Returns the 1-based position of the first of several substrings to be found in the original string, or NULL",
              "parameters": [
                {
                  "greedy": true,
                  "type":"string",
                  "name": "possible_needles"
                }
              ]
            }
          ]
        },
        "FindAnyOf":{
          "forms": [
            {
              "minimumBuild":7015,
              "type":"jsonobject",
              "description": "Returns the 1-based position, and what was found, of the first of several substrings to be found in the original string, or NULL",
              "parameters": [
                {
                  "greedy": true,
                  "type":"string",
                  "name":"possible_needles"
                }
              ]
            }
          ]
        },
        "FindAnyOfArray":{
          "forms": [
            {
              "minimumBuild":7015,
              "type":"jsonobject",
              "description": "Returns the 1-based position, and what was found, of the first of several substrings to be found in the original string, or NULL",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "arrayOfStrings"
                }
              ]
            }
          ]
        },
        "Length": {
          "forms": [
            {
              "type": "int64",
              "description": "Returns the length of the string"
            }
          ]
        },
        "Upper": {
          "forms": [
            {
              "type": "string",
              "description": "Returns a string containing the original string in all upper case"
            }
          ]
        },
        "Lower": {
          "forms": [
            {
              "type": "string",
              "description": "Returns a string containing the original string in all lower case"
            }
          ]
        },
        "Compare": {
          "forms": [
            {
              "type": "int",
              "description": "Compares this string, without regards to case, to the given text. Return value is less than 0 if the text would come before it in the dictionary, 0 if it is equal, or greater than 0 if the text would come after the string",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "CompareCS": {
          "forms": [
            {
              "type": "int",
              "description": "Compares this string, with regards to case, to the given text. Return value is less than 0 if the text would come before it in the dictionary, 0 if it is equal, or greater than 0 if the text would come after the string",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Equal": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the string is equal to, without regards to case, the given text",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "NotEqual": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the string is not equal to, without regards to case, the given text",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "EqualCS": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the string is equal to, with regards to case, the given text",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "NotEqualCS": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the string is not equal to, with regards to case, the given text",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Equals": {
          "forms": [
            {
              "type": "bool",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "NotEquals": {
          "forms": [
            {
              "type": "bool",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "EqualsCS": {
          "forms": [
            {
              "type": "bool",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "NotEqualsCS": {
          "forms": [
            {
              "type": "bool",
              "parameters": [
                {
                  "name": "compareTo",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Count": {
          "forms": [
            {
              "type": "int",
              "description": "The number of times a specific character appears in the string",
              "parameters": [
                {
                  "name": "findCharacter",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Token": {
          "forms": [
            {
              "type": "string",
              "description": "\"Tokenizes\" the string by the given separator and returns the #th token",
              "parameters": [
                {
                  "name": "token",
                  "type": "string"
                },
                {
                  "name": "numToken",
                  "type": "uint"
                }
              ]
            }
          ]
        },
        "EscapeQuotes": {
          "forms": [
            {
              "type": "string",
              "description": "Uses slashes to escape \" only"
            }
          ]
        },
        "Escape": {
          "forms": [
            {
              "type": "string",
              "description": "If escapeLavishScript is false/0, Uses slashes to escape \\, \", carriage return, line feed, tab, but NOT LavishScript data sequences",
              "parameters": [
                {
                  "name": "mode",
                  "type": "uint",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "type": "string",
              "description": "Uses slashes to escape \\, \", carriage return, line feed, tab, as well as LavishScript data sequences"
            }
          ]
        },
        "Replace": {
          "forms": [
            {
              "type": "string",
              "description": "Performs single-character replacement with any number of character pairs",
              "parameters": [
                {
                  "name": "character"
                },
                {
                  "name": "with"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetAt": {
          "forms": [
            {
              "type": "byte",
              "description": "Retrieves a character at the #th position in the string (1-based)",
              "parameters": [
                {
                  "name": "position",
                  "type": "uint"
                }
              ]
            }
          ]
        },
        "UniString": {
          "forms": [
            {
              "type": "unistring"
            }
          ]
        },
        "URLEncode": {
          "forms": [
            {
              "type": "string",
              "description": "Returns a %u encoded version of the string, suitable for urls"
            }
          ]
        },
        "NotNULLOrEmpty": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the string is not empty and does not contain the literal NULL. This provides a shortcut for: <tt>if ${MyString.Length} &amp;&amp; !${MyString.Equals[NULL]}</tt>"
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "string",
              "description": "Returns a JSON encoded version of the string, including surrounding quotes"
            }
          ]
        },
        "Trim": {
          "forms": [
            {
              "type": "string",
              "description": "Returns a copy of the string with no leading or trailing whitespace"
            }
          ]
        },
        "ReplaceSubstring": {
          "forms": [
            {
              "type": "string",
              "parameters": [
                {
                  "name": "needle",
                  "type": "string"
                }
              ]
            },
            {
              "type": "string",
              "parameters": [
                {
                  "name": "haystack",
                  "type": "string"
                }
              ]
            },
            {
              "type": "string",
              "description": "Performs in-place replacement of a needle in a haystack. For example, <tt>${String[abcdefg].ReplaceSubstring[def,xyz]}</tt> is <tt>abcxyzg</tt>",
              "parameters": [
                {
                  "name": "needle"
                },
                {
                  "name": "replacement"
                }
              ]
            }
          ]
        },
        "StartsWith": {
          "forms": [
            {
              "type": "string"
            }
          ]
        },
        "EndsWith": {
          "forms": [
            {
              "type": "string"
            }
          ]
        }
      },
      "index": {
        "forms": [
          {
            "type": "byte",
            "parameters": [
              {
                "name": "position",
                "type": "uint"
              }
            ]
          }
        ]
      },
      "staticMembers":{
        "Equal":{
          "forms": [
            {
              "minimumBuild":6991,
              "description": "Tests equality (case insensitive) of two strings",
              "type":"bool",
              "parameters": [
                {
                  "type":"string",
                  "name": "A"
                },
                {
                  "type":"string",
                  "name": "B"
                }
              ]
            }
          ]
        },
        "IsNULLOrEmpty":{
          "forms": [
            {
              "minimumBuild":6991,
              "description": "Determines if a string is NULL or empty",
              "type":"bool",
              "parameters": [
                {
                  "type":"string",
                  "name": "str"
                }
              ]
            }
          ]
        },
        "IsNULLOrWhitespace":{
          "forms": [
            {
              "minimumBuild":6991,
              "description": "Determines if a string is NULL or empty/whitespace",
              "type":"bool",
              "parameters": [
                {
                  "type":"string",
                  "name": "str"
                }
              ]
            }
          ]
        }
      },
      "persistent": false
    },
    "rgb": {
      "members": {
        "Red": {
          "forms": [
            {
              "type": "byte",
              "description": "0-255 indicating the amount of red"
            }
          ]
        },
        "Green": {
          "forms": [
            {
              "type": "byte",
              "description": "0-255 indicating the amount of green"
            }
          ]
        },
        "Blue": {
          "forms": [
            {
              "type": "byte",
              "description": "0-255 indicating the amount of blue"
            }
          ]
        },
        "Hex": {
          "forms": [
            {
              "type": "string",
              "description": "A hexadecimal value representing the color, in the form rrggbb.  For example, \"ff0000\" is full red."
            }
          ]
        }
      },
      "methods": {
        "Set": {
          "forms": [
            {
              "parameters": [
                {
                  "name": "hexValue",
                  "type": "string"
                }
              ]
            },
            {
              "description": "Sets the rgb hex to a given value"
            }
          ]
        }
      },
      "persistent": false,
      "asString": {
        "member": "Hex"
      }
    },
    "byte": {
      "members": {
        "Inc":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "byte",
              "description": "Returns this byte, plus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "byte",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Dec":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "byte",
              "description": "Returns this byte, minus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "byte",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },        
        "Between": {
          "forms": [
            {
              "type": "bool",
              "parameters": [
                {
                  "type": "byte"
                },
                {
                  "type": "byte"
                }
              ]
            }
          ]
        },
        "Equal": {}
      },
      "methods": {
        "Inc": {
          "forms": [
            {
              "description": "Increments this byte by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "byte",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Increments this byte by 1"
            }
          ]
        },
        "Dec": {
          "forms": [
            {
              "description": "Decrements this byte by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "byte",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Decrements this bye by 1"
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "description": "Sets this bye to a given value",
              "parameters": [
                {
                  "name": "expression",
                  "type": "byte"
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "Min":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"byte"
            }
          ]
        },
        "Max":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"byte"
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "value",
                "type": "byte",
                "optional": true,
                "default":0
              }
            ]
          }
        ]
      },
      "persistent": false
    },
    "bool": {
      "members": {
        "Equal": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the boolean value matches the boolean result of the calculation (zero is FALSE, non-zero is TRUE)",
              "parameters": [
                {
                  "name": "expression",
                  "type": "bool"
                }
              ]
            }
          ]
        },
        "Not": {
          "forms": [
            {
              "type": "bool",
              "description": "Gives the opposite value, e.g. if the value is TRUE, Not is FALSE"
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "string",
              "description": "A string containing true or false as would be specified in JSON"
            }
          ]
        }
      },
      "methods": {
        "Toggle": {
          "forms": [
            {
              "description": "Toggles between TRUE and FALSE"
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "description": "Sets this bool to a specific value",
              "parameters": [
                {
                  "name": "expression",
                  "type": "bool"
                }
              ]
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "value",
                "type": "bool",
                "optional": true,
                "default":false
              }
            ]
          }
        ]
      },
      "persistent": false,
      "asString": {
        "description": "TRUE (non-zero) or FALSE (zero)"
      }
    },
    "unistring": {
      "baseType": "string",
      "members": {
        "String": {
          "forms": [
            {
              "type": "string"
            }
          ]
        }
      },
      "persistent": false
    },
    "mutablestring": {
      "baseType": "string",
      "members": {
        "String": {
          "forms": [
            {
              "type": "string",
              "description": "Retrieves the appropriate string object from this mutablestring"
            }
          ]
        }
      },
      "methods": {
        "Set": {
          "forms": [
            {},
            {
              "description": "Sets the value of the string to this new text",
              "parameters": [
                {
                  "name": "newValue",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Concat": {
          "forms": [
            {
              "description": "Concatenates the string with this new text",
              "parameters": [
                {
                  "name": "value",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "ToUpper": {
          "forms": [
            {
              "description": "Converts the string to upper case"
            }
          ]
        },
        "ToLower": {
          "forms": [
            {
              "description": "Converts the string to lower case"
            }
          ]
        },
        "Prepend": {
          "forms": [
            {
              "parameters": [
                {
                  "name": "value",
                  "type": "string"
                }
              ]
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "value",
                "type": "string",
                "optional": true,
                "default":""
              }
            ]
          }
        ]
      },
      "persistent": false
    },
    "float": {
      "members": {
        "Inc":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "float",
              "description": "Returns this float, plus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float",
                  "optional": true,
                  "default": 1.0
                }
              ]
            }
          ]
        },
        "Dec":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "float",
              "description": "Returns this float, minus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float",
                  "optional": true,
                  "default": 1.0
                }
              ]
            }
          ]
        },
        "Deci": {
          "forms": [
            {
              "type": "string",
              "description": "The value of this float, to the nearest tenth"
            }
          ]
        },
        "Centi": {
          "forms": [
            {
              "type": "string",
              "description": "The value of this float, to the nearest hundredth"
            }
          ]
        },
        "Milli": {
          "forms": [
            {
              "type": "string",
              "description": "The value of this float, to the nearest thousandth"
            }
          ]
        },
        "Int": {
          "forms": [
            {
              "type": "int64",
              "description": "The value of this float, to its largest whole number (e.g. for 1.9 this is 1, for -0.1, this is -1)"
            }
          ]
        },
        "Precision": {
          "forms": [
            {
              "type": "string",
              "description": "The value of this float, to the nearest # decimal places (e.g. 1 is tenths, 2 is hundredths, 3 is thousandths, and so on)",
              "parameters": [
                {
                  "name": "numPlaces",
                  "type": "int"
                }
              ]
            }
          ]
        },
        "Ceil": {
          "forms": [
            {
              "type": "int64",
              "description": "The value of this float, to its largest partial number (e.g. for 1.1 this is 2, for -0.1 this is 0)."
            }
          ]
        },
        "Round": {
          "forms": [
            {
              "type": "int",
              "description": "The value of this float, rounded to the nearest whole number"
            }
          ]
        },
        "Equal": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the float matches the specified value",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float"
                }
              ]
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "string",
              "description": "A string with the value of the float, as would be in JSON"
            }
          ]
        },
        "Between": {
          "forms": [
            {
              "type": "bool",
              "minimumBuild": 6790,
              "description": "TRUE if   a<= value and value <= b",
              "parameters": [
                {
                  "name": "minInclusive",
                  "type": "float"
                },
                {
                  "name": "maxInclusive",
                  "type": "float"
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "Inc": {
          "forms": [
            {
              "description": "Increments this float by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float",
                  "optional": true,
                  "default": 1.0
                }
              ]
            },
            {
              "description": "Increments this float by 1.0"
            }
          ]
        },
        "Dec": {
          "forms": [
            {
              "description": "Decrements this float by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float",
                  "optional": true,
                  "default": 1.0
                }
              ]
            },
            {
              "description": "Decrements this float by 1.0"
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "description": "Sets this float to a given value",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float"
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "Min":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"float"
            }
          ]
        },
        "Max":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"float"
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "value",
                "type":"float",
                "optional": true,
                "default":0.0
              }
            ]
          }
        ]
      },
      "persistent": false,
      "asString": {}
    },
    "int64": {
      "members": {
        "Inc":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "int64",
              "description": "Returns this int64, plus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int64",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Dec":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "int64",
              "description": "Returns this int64, minus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int64",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Float": {
          "forms": [
            {
              "type": "float",
              "description": "This number, converted to a float (NOTE: Float is only accurate to 32 bits of precision)"
            }
          ]
        },
        "Hex": {
          "forms": [
            {
              "type": "string",
              "description": "A hexadecimal string equivalent to this number"
            }
          ]
        },
        "LeadingZeroes": {
          "forms": [
            {
              "type": "string",
              "description": "A string representation of this number, with at least this many decimal places.  The number will be lead with zeroes to reach the desired length",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Between": {
          "forms": [
            {
              "type": "bool",
              "minimumBuild": 6779,
              "description": "TRUE if   a<= value and value <= b",
              "parameters": [
                {
                  "type": "int64"
                },
                {
                  "type": "int64"
                }
              ]
            }
          ]
        },
        "Equal": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the int64 matches the specified value",
              "parameters": [
                {
                  "type": "formula"
                }
              ]
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "string",
              "description": "A string with the value of the int64, as would be in JSON"
            }
          ]
        }
      },
      "methods": {
        "Inc": {
          "forms": [
            {
              "description": "Increments this int64 by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int64",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Increments this int64 by 1"
            }
          ]
        },
        "Dec": {
          "forms": [
            {
              "description": "Decrements this int64 by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int64",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Decrements this int64 by 1"
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "description": "Sets this int64 to a given value",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int64"
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "Min":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"int64"
            }
          ]
        },
        "Max":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"int64"
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "value",
                "type":"int64",
                "optional": true,
                "default":0
              }
            ]
          }
        ]
      },
      "persistent": false,
      "asString": {}
    },
    "float64": {
      "members": {
        "Inc":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "float64",
              "description": "Returns this float64, plus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Dec":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "float64",
              "description": "Returns this float64, minus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Deci": {
          "forms": [
            {
              "type": "string",
              "description": "The value of this float, to the nearest tenth"
            }
          ]
        },
        "Centi": {
          "forms": [
            {
              "type": "string",
              "description": "The value of this float, to the nearest hundredth"
            }
          ]
        },
        "Milli": {
          "forms": [
            {
              "type": "string",
              "description": "The value of this float, to the nearest thousandth"
            }
          ]
        },
        "Int": {
          "forms": [
            {
              "type": "int64",
              "description": "The value of this float, to its largest whole number (e.g. for 1.9 this is 1, for -0.1, this is -1)"
            }
          ]
        },
        "Precision": {
          "forms": [
            {
              "type": "string",
              "description": "The value of this float, to the nearest # decimal places (e.g. 1 is tenths, 2 is hundredths, 3 is thousandths, and so on)",
              "parameters": [
                {
                  "name": "numPlaces",
                  "type": "int"
                }
              ]
            }
          ]
        },
        "Ceil": {
          "forms": [
            {
              "type": "int64",
              "description": "The value of this float, to its largest partial number (e.g. for 1.1 this is 2, for -0.1 this is 0)."
            }
          ]
        },
        "Round": {
          "forms": [
            {
              "type": "int",
              "description": "The value of this float, rounded to the nearest whole number"
            }
          ]
        },
        "Equal": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the float64 matches the specified value",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float"
                }
              ]
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "string",
              "description": "A string with the value of the float64, as would be in JSON"
            }
          ]
        },
        "Between": {
          "forms": [
            {
              "type": "bool",
              "minimumBuild": 6790,
              "description": "TRUE if   a<= value and value <= b",
              "parameters": [
                {
                  "name": "minInclusive",
                  "type": "float64"
                },
                {
                  "name": "maxInclusive",
                  "type": "float64"
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "Inc": {
          "forms": [
            {
              "description": "Increments this float64 by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Increments this float64 by 1.0"
            }
          ]
        },
        "Dec": {
          "forms": [
            {
              "description": "Decrements this float64 by a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64",
                  "optional": true,
                  "default": 1
                }
              ]
            },
            {
              "description": "Decrements this float64 by 1.0"
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "description": "Sets this float64 to a given value",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "Min":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"float64"
            }
          ]
        },
        "Max":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"float64"
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "value",
                "type":"float64",
                "optional": true,
                "default":0.0
              }
            ]
          }
        ]
      },
      "persistent": false,
      "asString": {}
    },
    "floatptr": {
      "baseType": "float",
      "members": {
        "Address": {}
      },
      "persistent": false
    },
    "float64ptr": {
      "members": {
        "Inc":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "float64",
              "description": "Returns this float64, plus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Dec":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "float64",
              "description": "Returns this float64, minus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Deci": {},
        "Centi": {},
        "Milli": {},
        "Int": {},
        "Precision": {},
        "Ceil": {},
        "Round": {},
        "Equal": {},
        "AsJSON": {}
      },
      "methods": {
        "Inc": {},
        "Dec": {},
        "Set": {}
      },
      "persistent": false,
      "asString": {}
    },
    "stringptr": {
      "baseType": "string",
      "members": {
        "Address": {}
      },
      "persistent": false
    },
    "uintptr": {
      "baseType": "uint",
      "members": {
        "Address": {}
      },
      "persistent": false
    },
    "intptr": {
      "baseType": "int",
      "members": {
        "Address": {}
      },
      "persistent": false
    },
    "int64ptr": {
      "members": {
        "Inc":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "int64",
              "description": "Returns this int64, plus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int64",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },
        "Dec":{
          "forms": [
            {
              "minimumBuild":6921,
              "type": "int64",
              "description": "Returns this int64, minus a given amount",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int64",
                  "optional": true,
                  "default": 1
                }
              ]
            }
          ]
        },        
        "Float": {},
        "Hex": {},
        "LeadingZeroes": {},
        "Address": {},
        "Equal": {},
        "AsJSON": {}
      },
      "methods": {
        "Inc": {},
        "Dec": {},
        "Set": {}
      },
      "persistent": false,
      "asString": {}
    },
    "rgbptr": {
      "members": {
        "Address": {}
      },
      "persistent": false
    },
    "byteptr": {
      "baseType": "byte",
      "members": {
        "Address": {}
      },
      "persistent": false
    },
    "boolptr": {
      "baseType": "bool",
      "members": {
        "Address": {}
      },
      "persistent": false
    },
    "math": {
      "static":true,
      "members": {
        "Abs": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the absolute value of a given formula",
              "parameters": [
                {
                  "name": "value",
                  "type": "float"
                }
              ]
            }
          ]
        },
        "Rand": {
          "forms": [
            {
              "type": "uint",
              "description": "Returns a random number from 0 to # - 1, where # is the result of the given formula. The maximum value that can be returned is 32767.",
              "parameters": [
                {
                  "name": "range",
                  "type": "uint"
                }
              ]
            }
          ]
        },
        "Calc": {
          "forms": [
            {
              "type": "float64",
              "description": "Returns the result of a given formula",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            }
          ]
        },
        "Sin": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the sine of a given formula in degrees",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            }
          ]
        },
        "Cos": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the cosine of a given formula in degrees",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            }
          ]
        },
        "Tan": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the tangent of a given formula in degrees",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            }
          ]
        },
        "Asin": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the asin of a given formula in degrees (<tt>asin(sin(x))=x</tt>)",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            }
          ]
        },
        "Acos": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the acos of a given formula in degrees (<tt>acos(cos(x))=x</tt>)",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            }
          ]
        },
        "Atan": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the atan of a given formula in degrees (<tt>atan(tan(x))=x</tt>)",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            },
            {
              "type": "float",
              "description": "Returns the atan2 of two given formulae in degrees",
              "parameters": [
                {
                  "name": "expression1",
                  "type": "float64"
                },
                {
                  "name": "expression2",
                  "type": "float64"
                }
              ]
            }
          ]
        },
        "Hex": {
          "forms": [
            {
              "type": "string",
              "description": "Returns a hexadecimal string equivalent to the #",
              "parameters": [
                {
                  "name": "value",
                  "type": "int"
                }
              ]
            }
          ]
        },
        "Dec": {
          "forms": [
            {
              "type": "int",
              "description": "Returns the decimal equivalent to the hexadecimal value given",
              "parameters": [
                {
                  "name": "hexValue",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Not": {
          "forms": [
            {
              "type": "int",
              "description": "Returns the bitwise NOT of the #",
              "parameters": [
                {
                  "name": "value",
                  "type": "int"
                }
              ]
            }
          ]
        },
        "Distance": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the 1-dimensional distance between x1 and x2",
              "parameters": [
                {
                  "name": "X1",
                  "type": "float"
                },
                {
                  "name": "X2",
                  "type": "float"
                }
              ]
            },
            {
              "type": "float",
              "description": "Returns the 2-dimensional distance between x1,y1 and x2,y2",
              "parameters": [
                {
                  "name": "X1",
                  "type": "float"
                },
                {
                  "name": "Y1",
                  "type": "float"
                },
                {
                  "name": "X2",
                  "type": "float"
                },
                {
                  "name": "Y2",
                  "type": "float"
                }
              ]
            },
            {
              "type": "float",
              "description": "Returns the 3-dimensional distance between x1,y1,z1 and x2,y2,z2",
              "parameters": [
                {
                  "name": "X1",
                  "type": "float"
                },
                {
                  "name": "Y1",
                  "type": "float"
                },
                {
                  "name": "Z1",
                  "type": "float"
                },
                {
                  "name": "X2",
                  "type": "float"
                },
                {
                  "name": "Y2",
                  "type": "float"
                },
                {
                  "name": "Z2",
                  "type": "float"
                }
              ]
            }
          ]
        },
        "Sqrt": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the square root of a given formula",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            }
          ]
        },
        "Calc64": {
          "forms": [
            {
              "type": "int64",
              "description": "Returns the result of a given formula with 64-bit integer precision",
              "parameters": [
                {
                  "name": "expression",
                  "type": "int64"
                }
              ]
            }
          ]
        },
        "DistancePointLine": {
          "forms": [
            {
              "type": "float",
              "description": "Returns the distance from x,y to the nearest point on the line from a and b, or NULL if the perpendicular passing through point (x,y) to the line defined by (ax,ay) (bx,by) does not intersect on the segment between points a and b.",
              "parameters": [
                {
                  "name": "pointX",
                  "type": "float"
                },
                {
                  "name": "pointY",
                  "type": "float"
                },
                {
                  "name": "segmentStartX",
                  "type": "float"
                },
                {
                  "name": "segmentStartY",
                  "type": "float"
                },
                {
                  "name": "segmentEndX",
                  "type": "float"
                },
                {
                  "name": "segmentEndY",
                  "type": "float"
                }
              ]
            }
          ]
        },
        "Log": {
          "forms": [
            {
              "type": "float",
              "parameters": [
                {
                  "name": "expression",
                  "type": "float64"
                }
              ]
            }
          ]
        }
      }
    },
    "type": {
      "members": {
        "Name": {
          "forms": [
            {
              "type": "string",
              "description": "Name of the data type"
            }
          ]
        },
        "Member": {
          "forms": [
            {
              "type": "string",
              "parameters": [
                {
                  "name": "id",
                  "type": "uint"
                }
              ]
            },
            {
              "type": "uint",
              "parameters": [
                {
                  "name": "name",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Method": {
          "forms": [
            {
              "minimumBuild":6951,
              "type": "string",
              "parameters": [
                {
                  "name": "id",
                  "type": "uint"
                }
              ]
            },
            {
              "minimumBuild":6951,
              "type": "uint",
              "parameters": [
                {
                  "name": "name",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Members":{
          "forms": [
            {
              "minimumBuild":6951,
              "type":"jsonarray"
            }
          ]
        },
        "Methods":{
          "forms": [
            {
              "minimumBuild":6951,
              "type":"jsonarray"
            }
          ]
        },
        "Static":{
          "forms": [
            {
              "minimumBuild":6997,
              "type":"bool"
            }
          ]
        },
        "StaticMembers":{
          "forms": [
            {
              "minimumBuild":6991,
              "type":"jsonarray"
            }
          ]
        },
        "StaticMethods":{
          "forms": [
            {
              "minimumBuild":6991,
              "type":"jsonarray"
            }
          ]
        },
        "Inherits":{
          "forms": [
            {
              "minimumBuild":6951,
              "type":"type"
            }
          ]
        },
        "VariableType":{
          "forms": [
            {
              "minimumBuild":6951,
              "type":"type"
            }
          ]
        },
        "PersistentClass": {
          "forms": [
            {
              "type": "string"
            }
          ]
        },
        "Metadata": {
          "forms": [
            {
              "type": "jsonobject"
            }
          ]
        },
        "AsJSON":{
          "forms": [
            {
              "minimumBuild":6951,
              "type":"jsonobject"
            }
          ]
        }
      },
      "staticMembers": {
        "Get":{
          "forms": [
            {
                "minimumBuild":7042,
                "type":"type",
                "parameters": [
                  {
                    "type":"string",
                    "name": "name"
                  }
                ]
            }
        ]
        },
        "List":{
          "forms": [
            {
              "minimumBuild":7042,
              "type":"jsonarray",
              "parameters": [
                {
                  "optional": true,
                  "type":"jsonvalueref",
                  "name": "filterQuery",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      },
      "staticMethods": {
        "ForEach":{
          "forms": [
              {
                "minimumBuild":7042,
                  "parameters": [
                      {
                          "type":"string",
                          "name":"command"        
                      },
                      {
                          "type":"jsonvalueref",
                          "name": "filterQuery",
                          "optional": true,
                          "schema":{
                            "$ref":"#/definitions/select"
                          }
                      }    
                  ]
              }
          ]
        }
      },
      "persistent": false,
      "asString": {
        "member": "Name"
      }
    },
    "time": {
      "members": {
        "Hour": {
          "forms": [
            {
              "type": "intptr",
              "description": "Hour of the day (0-23)"
            }
          ]
        },
        "Minute": {
          "forms": [
            {
              "type": "intptr",
              "description": "Minute of the hour (0-59)"
            }
          ]
        },
        "Second": {
          "forms": [
            {
              "type": "intptr",
              "description": "Second of the minute (0-59)"
            }
          ]
        },
        "DayOfWeek": {
          "forms": [
            {
              "type": "uint",
              "description": "Day of the week (1-7)"
            }
          ]
        },
        "Day": {
          "forms": [
            {
              "type": "intptr",
              "description": "Day of the month (1-31 depending on the month)"
            }
          ]
        },
        "Month": {
          "forms": [
            {
              "type": "uint",
              "description": "Month of the year (1-12)"
            }
          ]
        },
        "Year": {
          "forms": [
            {
              "type": "uint",
              "description": "Year"
            }
          ]
        },
        "Time12": {
          "forms": [
            {
              "type": "string",
              "description": "Time in hh:mm:ss given in 12-hour format"
            }
          ]
        },
        "Time24": {
          "forms": [
            {
              "type": "string",
              "description": "Time in hh:mm:ss given in 24-hour format"
            }
          ]
        },
        "Date": {
          "forms": [
            {
              "type": "string",
              "description": "Date in mm/dd/yyyy"
            }
          ]
        },
        "Night": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if current time is after 7pm and before 7am"
            }
          ]
        },
        "SecondsSinceMidnight": {
          "forms": [
            {
              "type": "uint",
              "description": "Number of seconds since midnight"
            }
          ]
        },
        "Timestamp": {
          "forms": [
            {
              "type": "uint",
              "description": "Number of seconds since epoch (standard UNIX timestamp)"
            }
          ]
        },
        "DayOfWeekPtr": {
          "forms": [
            {
              "type": "intptr",
              "description": "Day of the week (0-6) - Mainly useful for *setting*"
            }
          ]
        },
        "MonthPtr": {
          "forms": [
            {
              "type": "intptr",
              "description": "Month of the year (0-11) - Mainly useful for *setting*"
            }
          ]
        },
        "YearPtr": {
          "forms": [
            {
              "type": "intptr",
              "description": "Year-1900 (e.g. 0 is 1900, 100 is 2000) - Mainly useful for *setting*"
            }
          ]
        }
      },
      "methods": {
        "Set": {
          "forms": [
            {
              "description": "Sets the value based on the given timestamp (standard UNIX timestamp, number of seconds since epoch)",
              "parameters": [
                {
                  "name": "timestamp",
                  "type": "int"
                }
              ]
            }
          ]
        },
        "Update": {
          "forms": [
            {
              "description": "Updates the type after setting an individual member (NOT needed when using the Set method)"
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "timestamp",
                "type": "int",
                "optional": true,
                "default":0
              }
            ]
          }
        ]
      },
      "staticMembers": {
        "Now":{
          "forms": [
              {
                  "minimumBuild":7000,
                  "type":"time"
              }
          ]
        }
      },
      "persistent": false,
      "asString": {
        "member": "Time24"
      }
    },
    "array": {
      "baseType": "objectcontainer",
      "members": {
        "Dimensions": {
          "forms": [
            {
              "type": "uint",
              "description": "Total number of extents of the array (e.g. 2-dimensional has two extents)"
            }
          ]
        },
        "Size": {
          "forms": [
            {
              "type": "uint",
              "description": "Total number of elements in a given dimension of the array",
              "parameters": [
                {
                  "name": "numDimension",
                  "type": "uint",
                  "optional": true
                }
              ]
            },
            {
              "type": "uint",
              "description": "Total number of elements in the array, including all dimensions"
            }
          ]
        },
        "Expand": {
          "forms": [
            {
              "type": "mutablestring"
            },
            {
              "type": "mutablestring",
              "description": "Retrieves the text representation of each object in the array as quoted parameters, separated by spaces.  If no parameters are given to Expand, the entire array will be used.  If only the begin # is used, the rest of the array, beginning with the element # specified, will be used.  If the length is additionally given, that number of elements from the array will be used, beginning with the element # specified as the beginning.",
              "parameters": [
                {
                  "name": "#",
                  "type": "begin"
                },
                {
                  "name": "length"
                }
              ]
            }
          ]
        },
        "ExpandComma": {
          "forms": [
            {
              "type": "mutablestring"
            },
            {
              "type": "mutablestring",
              "description": "Retrieves the text representation of each object in the array as quoted parameters, separated by commas.  If no parameters are given to Expand, the entire array will be used.  If only the begin # is used, the rest of the array, beginning with the element # specified, will be used.  If the length is additionally given, that number of elements from the array will be used, beginning with the element # specified as the beginning.",
              "parameters": [
                {
                  "name": "#",
                  "type": "begin"
                },
                {
                  "name": "length"
                }
              ]
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "unistring",
              "parameters": [
                {
                  "type": "string",
                  "constant": "multiline",
                  "optional": true
                }
              ]
            },
            {
              "type": "unistring",
              "description": "Returns a JSON array representation of this array, with each element converted by using its AsJSON member"
            }
          ]
        }
      },
      "methods": {
        "ForEach": {
          "forms": [
            {
              "description": "For each element in the array, performs the specified code. The [[TLO:ForEach|ForEach Top-Level Object]] is used to access the Key or Value for each iteration",
              "parameters": [
                {
                  "name": "command",
                  "type": "string"
                },
                {
                  "optional": true,                  
                  "name": "filterQuery",
                  "type": "jsonvalueref",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      },
      "index": {},
      "persistent": false
    },
    "system": {
      "static":true,
      "members": {
        "OS": {
          "forms": [
            {
              "type": "string",
              "description": "Operating system identifier (e.g. Microsoft Windows XP)"
            }
          ]
        },
        "MemFree": {
          "forms": [
            {
              "type": "uint",
              "description": "Amount of free physical system RAM, in megabytes"
            }
          ]
        },
        "MemTotal": {
          "forms": [
            {
              "type": "uint",
              "description": "Total amount of physical system RAM, in megabytes"
            }
          ]
        },
        "OSBuild": {
          "forms": [
            {
              "type": "string",
              "description": "Operating system build identifier (e.g. 2600.xpsp_sp2_rtm040803-2158)"
            }
          ]
        },
        "GetProcAddress": {
          "forms": [
            {
              "type": "uint",
              "description": "Retrieves the address of an exported function, usually in a DLL. (Level of understanding: High)",
              "parameters": [
                {
                  "name": "module"
                },
                {
                  "name": "function"
                }
              ]
            }
          ]
        },
        "TickCount": {
          "forms": [
            {
              "type": "uint",
              "description": "A timestamp given in milliseconds.  This value does \"wrap\" every 46 days or so."
            }
          ]
        },
        "GetCurrentDirectory": {},
        "MemoryUsage": {
          "forms": [
            {
              "type": "uint",
              "description": "Amount of memory used by this process (the uplink or session), in bytes"
            }
          ]
        },
        "APICall": {
          "restricted": true
        },
        "Processors": {},
        "ClipboardText": {},
        "ProcessID": {},
        "RegistryValue": {
          "forms": [
            {
              "type": "string",
              "description": "Retrieve a REG_DWORD, REG_SZ, or REG_EXPAND_SZ value from the system registry",
              "parameters": [
                {
                  "name":"registry",
                  "type":"string",
                  "enum": [
                    "hklm",
                    "hkcu"
                  ]
                },
                {
                  "name": "key"
                },
                {
                  "name": "value"
                }
              ]
            }
          ]
        },
        "EnvironmentVariable":{
          "forms": [
            {
              "minimumBuild":6900,
              "type":"unistring",
              "parameters": [
                {
                  "name": "name",
                  "type":"string"
                }
              ]
            }
          ]
        },
        "EnvironmentVariables":{
          "forms": [
            {
              "minimumBuild":6900,
              "type":"jsonarray"
            }
          ]
        },
        "ExpandEnvironmentStrings":{
          "forms": [
            {
              "minimumBuild":6900,
              "type":"unistring",
              "parameters": [
                {
                  "type":"string",
                  "name":"haystack"
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "SetEnvironmentVariable":{
          "forms": [
            {
              "minimumBuild":6900  
            },
            {
              "minimumBuild":6900,
              "parameters": [
                {
                  "name":"name",
                  "type":"string"
                },
                {
                  "name":"value",
                  "type":"string"
                }
              ]
            }
          ]
        },
        "CreateShortcut":{
          "forms": [
            {
              "minimumBuild":6872,
              "parameters": [
                {
                  "type":"jsonobject",
                  "name": "json"
                }
              ]
            }
          ]
        },
        "APICall": {
          "restricted": true
        },
        "SetClipboardText": {},
        "LoadDLL":{
          "forms": [
            {
              "minimumBuild":6923,
              "parameters": [
                {
                  "type": "string",
                  "name": "filePath"
                },
                {
                  "type":"string",
                  "name":"flags",
                  "optional": true,
                  "greedy": true,
                  "enum": [
                    "+imports",
                    "+exports",
                    "+direct",
                    "+disable",
                    "-imports",
                    "-exports",
                    "-direct",
                    "-disable"
                  ]
                }
              ]
            }
          ]
        },
        "DebugBreak":{
          "forms": [
            {
              "minimumBuild":6967
            }
          ]
        },
        "DebugOutput":{
          "forms": [
            {
              "minimumBuild":6967,
              "parameters": [
                {
                  "type":"string",
                  "name": "text"
                }
              ]
            }
          ]
        },
        "ShowMessageBox":{
          "forms": [
            {
              "minimumBuild":6967,
              "parameters": [
                {
                  "type":"string",
                  "name":"text"
                },
                {
                  "type":"string",
                  "name": "caption"
                }
              ]
            }
          ]
        }
      },
      "persistent": false,
      "asString": {}
    },
    "point3f": {
      "members": {
        "X": {
          "forms": [
            {
              "type": "floatptr",
              "description": "X coordinate"
            }
          ]
        },
        "Y": {
          "forms": [
            {
              "type": "floatptr",
              "description": "Y coordinate"
            }
          ]
        },
        "Z": {
          "forms": [
            {
              "type": "floatptr",
              "description": "Z coordinate"
            }
          ]
        },
        "XYZ": {
          "forms": [
            {
              "type": "string",
              "description": "concatenated XYZ string, separated by commas"
            },
            {
              "type": "string",
              "description": "concatenated XYZ string, separated by given field separator character",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Adjust": {},
        "Distance": {},
        "DistancePointLine": {}
      },
      "methods": {
        "Set": {
          "forms": [
            {
              "description": "Sets x to a given value",
              "parameters": [
                {
                  "name": "X"
                }
              ]
            },
            {
              "description": "Sets x,y to a given value",
              "parameters": [
                {
                  "name": "X"
                },
                {
                  "name": "Y"
                }
              ]
            },
            {
              "description": "Sets x,y,z to a given value",
              "parameters": [
                {
                  "name": "X"
                },
                {
                  "name": "Y"
                },
                {
                  "name": "Z"
                }
              ]
            }
          ]
        },
        "Adjust": {}
      },
      "initializer": {},
      "persistent": false,
      "asString": {}
    },
    "lavishscript": {
      "static":true,
      "members": {
        "Version": {
          "forms": [
            {
              "type": "string",
              "description": "LavishScript version number (e.g. 1.07)"
            }
          ]
        },
        "CurrentDirectory": {
          "forms": [
            {
              "type": "filepath",
              "description": "Current directory according to LavishScript"
            }
          ]
        },
        "RunningTime": {
          "forms": [
            {
              "type": "int",
              "description": "Amount of time, in milliseconds, the current application has been running.  This value wraps after about 23 days of leaving the application running."
            }
          ]
        },
        "HomeDirectory": {
          "forms": [
            {
              "type": "filepath",
              "description": "Home directory according to LavishScript"
            }
          ]
        },
        "LSModule": {
          "forms": [
            {
              "type": "string",
              "description": "LavishScript version number"
            }
          ]
        },
        "ExecuteAtom": {
          "forms": [
            {
              "type": "string",
              "description": "Executes an atom with the given name in global- or script-scope (if a script is currently in context).  Extra parameters are passed as parameters to the atom.  If the atom returns a value, this will be the string given.",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Executable": {
          "forms": [
            {
              "type": "filepath",
              "description": "Executable filename for the current process"
            }
          ]
        },
        "CommandLine": {},
        "VariableScope": {
          "forms": [
            {
              "type": "variablescope",
              "description": "The global variable scope"
            }
          ]
        },
        "CreateQuery": {
          "forms": [
            {
              "type": "uint",
              "description": "([[LavishScript:Object Queries|Object Queries]]) Creates a query with the given expression -- e.g. ${LavishScript.CreateQuery[Name==\"Bonkers\"]}",
              "parameters": [
                {
                  "type":"string",
                  "name": "expression"
                }
              ]
            }
          ]
        },
        "RetrieveQueryExpression": {
          "forms": [
            {
              "type": "string",
              "description": "([[LavishScript:Object Queries|Object Queries]]) Retrieves the query expression for a previously created query, by ID",
              "parameters": [
                {
                  "type":"uint",
                  "name": "queryID"
                }
              ]
            }
          ]
        },
        "QueryEvaluate": {
          "forms": [
            {
              "type": "bool",
              "description": "([[LavishScript:Object Queries|Object Queries]]) Determines if the given object matches the given query",
              "parameters": [
                {
                  "type":"uint",
                  "name": "queryID"
                },
                {
                  "type":"weakref",
                  "name": "object"
                }
              ]
            }
          ]
        },
        "Is64Bit": {},
        "MetaScript": {},
        "MetaScripts": {},
        "LoadMetaScript": {},
        "LoadMetaScriptJSON": {},
        "Aliases":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"jsonarray"
            }
          ]
        },
        "Commands":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"jsonarray"
            }
          ]
        },
        "Events":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"jsonarray"
            }
          ]
        },
        "Scripts":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"jsonarray"
            }
          ]
        },
        "TopLevelObjects":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"jsonarray"
            }
          ]
        },
        "Types":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"jsonarray"
            }
          ]
        },
        "LastError":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"string"
            }
          ]
        },
        "LastErrorSpam":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"bool"
            }
          ]
        },
        "OnSetLastError":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"anonevent"
            }
          ]
        }
      },
      "methods": {
        "Echo":{
          "forms": [
            {
              "minimumBuild":6964,
              "parameters": [
                {
                  "type":"string",
                  "greedy": true,
                  "name":"lines"
                }
              ]
            }
          ]
        },        
        "ExecuteAtom": {
          "forms": [
            {
              "description": "Executes an atom with the given name in global- or script-scope (if a script is currently in context).  Extra parameters are passed as parameters to the atom.",
              "parameters": [
                {
                  "type":"string",
                  "name": "name"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "RegisterEvent": {
          "forms": [
            {
              "description": "Registers an event of <name>",
              "parameters": [
                {
                  "type":"string",
                  "name": "name"
                }
              ]
            }
          ]
        },
        "RegisterAlias": {},
        "LoadModule": {},
        "Eval": {
          "forms": [
            {
              "description": "Evaluates the given command, directing any lines of output into an index:string",
              "parameters": [
                {
                  "type":"string",
                  "name": "command"
                },
                {
                  "name": "index:string",
                  "type": "weakref"
                }
              ]
            }
          ]
        },
        "RegisterEnum": {
          "forms": [
            {
              "description": "Registers a new enum and LavishScript Object Type with <typeName>. An optional second parameter controls whether the enum is flags, meaning that multiple values may be combined as part of the same value -- if not provided, the default is FALSE. After registering, value names can be added to the enum type via the Enum TLO",
              "parameters": [
                {
                  "type":"string",
                  "name": "typeName"
                },
                {
                  "type": "bool",
                  "name": "isFlags",
                  "optional": true,
                  "default":false
                }
              ]
            }
          ]
        },
        "LoadMetaScript": {},
        "LoadMetaScriptJSON": {},
        "SetLastError":{
          "forms": [
            {
              "minimumBuild":7007,
              "parameters": [
                {
                  "type":"string",
                  "name":"value",
                  "optional": true,
                  "default":""
                }
              ]
            }
          ]
        },
        "SetLastErrorSpam":{
          "forms": [
            {
              "minimumBuild":7007,
              "parameters": [
                {
                  "type":"bool",
                  "name":"value"
                }
              ]
            }
          ]
        }
      },
      "persistent": false
    },
    "script": {
      "members": {
        "ID": {},
        "Filename": {
          "forms": [
            {
              "type": "string",
              "description": "Filename of this script"
            }
          ]
        },
        "Variable": {
          "forms": [
            {
              "type": "variable",
              "description": "A given script-scope variable",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        },
        "RunningTime": {
          "forms": [
            {
              "type": "int",
              "description": "Number of milliseconds since this script began"
            }
          ]
        },
        "CurrentDirectory": {
          "forms": [
            {
              "type": "filepath",
              "description": "Current working directory for this script"
            }
          ]
        },
        "Paused": {
          "forms": [
            {
              "type": "bool",
              "description": "Scripts current paused state"
            }
          ]
        },
        "Profiling": {
          "forms": [
            {
              "type": "bool",
              "description": "Profiling status true/false. Debugging must be allowed for profiling to be on."
            }
          ]
        },
        "AllowDebug": {
          "forms": [
            {
              "type": "bool",
              "description": "If debugging is allowed"
            }
          ]
        },
        "ExecuteAtom": {
          "forms": [
            {
              "type": "string",
              "description": "Executes an atom in script-scope with the given name.  Any extra parameters are passed as parameters to the atom.  If the atom returns a value, the value is given.",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "VariableScope": {
          "forms": [
            {
              "type": "variablescope",
              "description": "The scripts variable scope"
            }
          ]
        },
        "Turbo": {},
        "MetaScript": {
          "forms": [
            {
              "type": "metascript"
            }
          ]
        },
        "Retain": {
          "forms": [
            {
              "type":"bool"
            }
          ]
        },
        "Function": {
          "forms": [
            {
              "type":"function",
              "parameters": [
                {
                  "type":"string",
                  "name": "name"
                }
              ]
            }
          ]
        },
        "Functions":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"jsonarray"
            }
          ]
        },
        "Atoms":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"jsonarray"
            }
          ]
        },
        "ObjectDef":{
          "forms": [
            {
              "minimumBuild":6991,
              "type":"scriptobjecttype",
              "description": "Retrieves a scriptobjecttype by name",
              "parameters": [
                {
                  "type":"string",
                  "name": "typeName"
                }
              ]
            }
          ]
        },
        "ObjectDefs":{
          "forms": [
            {
              "minimumBuild":6991,
              "type":"jsonarray"
            }
          ]
        },
        "LastError":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"string"
            }
          ]
        },
        "LastErrorSpam":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"bool"
            }
          ]
        },
        "OnSetLastError":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"anonevent"
            }
          ]
        },
        "OnExit":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"anonevent"
            }
          ]
        },
        "AsJSON":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"jsonobject"
            }
          ]
        }
      },
      "methods": {
        "End": {
          "forms": [
            {
              "description": "Ends execution of this script"
            }
          ]
        },
        "Squelch": {
          "forms": [
            {
              "description": "Squelches most output from this script (excluding most errors and generally excluding Echo)"
            }
          ]
        },
        "Unsquelch": {
          "forms": [
            {
              "description": "Unsquelches"
            }
          ]
        },
        "QueueCommand": {
          "forms": [
            {
              "description": "Inserts a command in the scripts command queue",
              "parameters": [
                {
                  "name": "command"
                }
              ]
            }
          ]
        },
        "Pause": {
          "forms": [
            {
              "description": "Pauses this script"
            }
          ]
        },
        "Resume": {
          "forms": [
            {
              "description": "Resumes this script"
            }
          ]
        },
        "ExecuteAtom": {
          "forms": [
            {
              "description": "Executes an atom in script-scope with the given name.  Any extra parameters are passed as parameters to the atom.",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "EnableProfiling": {
          "forms": [
            {
              "description": "Enables script profiling. Debugging must be turned on to enable."
            }
          ]
        },
        "DisableProfiling": {
          "forms": [
            {
              "description": "Disables script profiling."
            }
          ]
        },
        "DisableDebugging": {
          "forms": [
            {
              "description": "Disables debugging."
            }
          ]
        },
        "DumpStack": {
          "forms": [
            {
              "description": "Dumps the current stack into the console."
            }
          ]
        },
        "DumpProfiling": {
          "forms": [
            {
              "description": "Dumps the entire script into the console."
            }
          ]
        },
        "EnableDebugLogging": {
          "forms": [
            {
              "description": "Enables full debug logging to file.",
              "parameters": [
                {
                  "name": "filename"
                }
              ]
            }
          ]
        },
        "DisableDebugLogging": {
          "forms": [
            {
              "description": "Disables full debug logging"
            }
          ]
        },
        "SetLastError":{
          "forms": [
            {
              "minimumBuild":7007,
              "parameters": [
                {
                  "type":"string",
                  "name":"value",
                  "optional": true,
                  "default":""
                }
              ]
            }
          ]
        },
        "SetLastErrorSpam":{
          "forms": [
            {
              "minimumBuild":7007,
              "parameters": [
                {
                  "type":"bool",
                  "name": "value"
                }
              ]
            }
          ]
        },
        "SetRetain": {
          "forms": [
            {
              "parameters": [
                {
                  "type":"bool",
                  "name": "value"
                }
              ]
            }
          ]
        },
        "Turbo": {}
      },
      "staticMembers": {
        "New":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"script",
              "parameters": [
                {
                  "type":"string",
                  "name": "full_filename"
                },
                {
                  "greedy": true,
                  "type":"string",
                  "name": "script_params",
                  "optional": true
                }
              ]
            }
          ]
        },
        "Get":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"script",
              "parameters": [
                {
                  "type":"string",
                  "name": "filename"
                }
              ]
            }
          ]
        },
        "List":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"jsonarray",
              "parameters": [
                {
                  "optional": true,
                  "type":"jsonvalueref",
                  "name": "filterQuery",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "OnScriptStarted":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"anonevent"
            }
          ]
        },
        "OnScriptStopped":{
          "forms": [
            {
              "minimumBuild":7007,
              "type":"anonevent"
            }
          ]
        }
      },
      "staticMethods": {
        "ForEach":{
          "forms": [
            {
              "minimumBuild":7007,
                "parameters": [
                    {
                        "type":"string",
                        "name":"command"        
                    },
                    {
                        "type":"jsonvalueref",
                        "name": "filterQuery",
                        "optional": true,
                        "schema":{
                          "$ref":"#/definitions/select"
                        }
                    }    
                ]
            }
          ]
        }
      }
    },
    "function": {
      "members": {
        "Name": {},
        "Metadata": {}
      }
    },
    "metascript": {
      "members": {
        "ID": {},
        "Script": {}
      },
      "methods": {
        "Start": {},
        "Stop": {},
        "Unload": {}
      }
    },
    "variable": {},
    "exists": {
      "description": "Used to determine validity of an object or Data Sequence",
      "asString": {
        "constant": "TRUE"
      }
    },
    "filepath": {
      "variableType": "mutablefilepath",
      "baseType": "unistring",
      "members": {
        "PathExists": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the given path exists"
            }
          ]
        },
        "FileExists": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the given additional path exists.  This can be a directory OR file, and can be an absolute path or a path relative to this filepath",
              "parameters": [
                {
                  "name": "additionalPath",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Path": {
          "forms": [
            {
              "type": "unistring",
              "description": "The unistring representation of this path"
            }
          ]
        },
        "PathOnly": {
          "forms": [
            {
              "type": "unistring",
              "minimumBuild":7014,
              "description": "The unistring representation of this path, minus the filename (portion after last /)"
            }
          ]
        },
        "FilenameOnly": {
          "forms": [
            {
              "type": "unistring",
              "minimumBuild":7014,
              "description": "The unistring representation of the filename, minus the path (portion before last /)"
            }
          ]
        },
        "AbsolutePath": {
          "forms": [
            {
              "type": "unistring",
              "description": "The unistring representation of this path converted to an absolute path"
            }
          ]
        },
        "GetFiles":{
          "forms": [
            {
              "type":"jsonarray",
              "minimumBuild":6900,
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "name":"wildcard",
                  "default":"*"
                }
              ]
            }
          ]
        },
        "GetDirectories":{
          "forms": [
            {
              "type":"jsonarray",
              "minimumBuild":6900,
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "name":"wildcard",
                  "default":"*"
                }
              ]
            }
          ]
        }
      },
      "persistent": false
    },
    "mutablefilepath": {
      "baseType": "mutablestring",      
      "members": {
        "PathExists": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the given path exists"
            }
          ]
        },
        "FileExists": {
          "forms":[
            {
              "type": "bool",
              "description": "TRUE if the given additional path exists.  This can be a directory OR file, and can be an absolute path or a path relative to this filepath",
              "parameters": [
                {
                  "name": "additionalPath",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "Path": {
          "forms": [
            {
              "type": "string",
              "description": "The string representation of this path"
            }
          ]
        },
        "PathOnly": {
          "forms": [
            {
              "minimumBuild":7014,
              "type": "string",
              "description": "The string representation of this path, minus the filename (portion after last /)"
            }
          ]
        },
        "FilenameOnly": {
          "forms": [
            {
              "minimumBuild":7014,
              "type": "string",
              "description": "The string representation of the filename, minus the path (portion before last /)"
            }
          ]
        },
        "AbsolutePath": {
          "forms": [
            {
              "type": "string",
              "description": "The path, converted if necessary to an absolute path"
            }
          ]
        },
        "GetFiles":{
          "forms": [
            {
              "type":"jsonarray",
              "minimumBuild":6947,
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "name":"wildcard",
                  "default":"*"
                }
              ]
            }
          ]
        },
        "GetDirectories":{
          "forms": [
            {
              "type":"jsonarray",
              "minimumBuild":6947,
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "name":"wildcard",
                  "default":"*"
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "Set": {
          "forms": [
            {
              "description": "Sets the path to the a value",
              "parameters": [
                {
                  "type":"string",
                  "name": "value"
                }
              ]
            }
          ]
        },
        "MakeAbsolute": {
          "forms": [
            {
              "description": "Sets the path to its Absolute value"
            }
          ]
        },
        "MakeSubdirectory": {
          "forms": [
            {
              "parameters": [
                {
                  "type":"string",
                  "name":"Sub-directory name"
                }
              ]
            }
          ] 
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "type":"string",
                "name":"value",
                "optional": true,
                "default":""
              }
            ]
          }
        ]
      },
      "persistent": false,
      "asString": {
        "member": "Path"
      }
    },
    "file": {
      "members": {
        "Open": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the file is open"
            }
          ]
        },
        "Path": {
          "forms": [
            {
              "type": "filepath",
              "description": "Full path to this file"
            }
          ]
        },
        "Filename": {
          "forms": [
            {
              "type": "string",
              "description": "Filename of this file"
            }
          ]
        },
        "Read": {
          "forms": [
            {
              "type": "string",
              "description": "Reads a line from this file, up to 1024 characters long (result includes carriage return)"
            },
            {
              "type": "string",
              "description": "Reads a line from this file, up to # characters long (result includes carriage return)",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "ReadBinary": {
          "forms": [
            {
              "type": "int",
              "description": "Reads # bytes into the specified buffer. Result is the number of bytes read.",
              "parameters": [
                {
                  "name": "variable",
                  "type": "binary"
                },
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Position": {
          "forms": [
            {
              "type": "int",
              "description": "Current position within the file"
            }
          ]
        },
        "Size": {
          "forms": [
            {
              "type": "int",
              "description": "Size of the file"
            }
          ]
        },
        "EOF": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the previous Read or ReadBinary hit the end of the file"
            }
          ]
        }
      },
      "methods": {
        "SetFilename": {
          "forms": [
            {
              "description": "Sets the full path and filename. Only valid while file is closed.",
              "parameters": [
                {
                  "name": "filename"
                }
              ]
            }
          ]
        },
        "Open": {
          "forms": [
            {
              "description": "Opens the file in read-write mode. Creates the file if it does not exist."
            },
            {
              "description": "Opens the file in read-only mode. Does not create the file if it does not exist.",
              "parameters": [
                {
                  "name": "readonly"
                }
              ]
            }
          ]
        },
        "Close": {
          "forms": [
            {
              "description": "Closes the file"
            }
          ]
        },
        "Write": {
          "forms": [
            {
              "description": "Writes the given text to the file",
              "parameters": [
                {
                  "name": "text"
                }
              ]
            }
          ]
        },
        "WriteBinary": {
          "forms": [
            {
              "description": "Writes # bytes from the given buffer variable to the file",
              "parameters": [
                {
                  "name": "variable",
                  "type": "binary"
                },
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Seek": {
          "forms": [
            {
              "description": "Seeks to the specified position within the file",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "SeekEnd": {
          "forms": [
            {
              "description": "Seeks to the end of the file"
            }
          ]
        },
        "Skip": {
          "forms": [
            {
              "description": "Skips # bytes within the file",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Truncate": {
          "forms": [
            {
              "description": "Truncates the file at the current position (all data after this point in the file is removed)"
            }
          ]
        },
        "Flush": {
          "forms": [
            {
              "description": "Forces any pending writes to disk.  Writes may otherwise be buffered until the file is closed, or if the file is open for both reading and writing, until a read operation"
            }
          ]
        },
        "Copy": {},
        "Delete": {},
        "Rename": {}
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "type":"string",
                "name":"filePath",
                "optional": true,
                "default":""
              }
            ]
          }
        ]
      },
      "persistent": false,
      "asString": {}
    },
    "filelist": {
      "members": {
        "Files": {
          "forms": [
            {
              "type": "int",
              "description": "Total file count"
            }
          ]
        },
        "File": {
          "forms": [
            {
              "type": "filelistentry",
              "description": "The filelistentry of file <#>",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "GetFiles": {
          "forms": [
            {
              "description": "Gets all files from the given directory. (Defaults to current directory and * for files.)",
              "parameters": [
                {
                  "name": "*"
                }
              ]
            }
          ]
        },
        "GetDirectories": {
          "forms": [
            {
              "description": "Gets all directories from the given directory. (Defaults to current directory)",
              "parameters": [
                {
                  "name": "*"
                }
              ]
            }
          ]
        },
        "Reset": {
          "forms": [
            {
              "description": "Clears the filelist."
            }
          ]
        }
      },
      "persistent": false
    },
    "filelistentry": {
      "members": {
        "Filename": {
          "forms": [
            {
              "type": "string",
              "description": "Name of the file"
            }
          ]
        },
        "FullPath": {
          "forms": [
            {
              "type": "string",
              "description": "Path+Filename of the file"
            }
          ]
        },
        "CreationTime": {
          "forms": [
            {
              "type": "int64ptr",
              "description": "Win32 FILETIME (number of 100-nanosecond intervals since January 1, 1601) value representing the time of creation of this file"
            }
          ]
        },
        "LastWriteTime": {
          "forms": [
            {
              "type": "int64ptr",
              "description": "Win32 FILETIME (number of 100-nanosecond intervals since January 1, 1601) value representing the last time of modification of this file"
            }
          ]
        },
        "LastAccessTime": {
          "forms": [
            {
              "type": "int64ptr",
              "description": "Win32 FILETIME (number of 100-nanosecond intervals since January 1, 1601) value representing the last time of acces of this file"
            }
          ]
        },
        "Size": {
          "forms": [
            {
              "type": "int",
              "description": "Size in bytes of the file"
            }
          ]
        }
      },
      "persistent": false,
      "asString": {}
    },
    "binary": {
      "members": {
        "Int": {
          "forms": [
            {
              "type": "intptr",
              "description": "An int at byte position # of this buffer",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Byte": {
          "forms": [
            {
              "type": "byteptr",
              "description": "A byte at position # of this buffer",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Float": {
          "forms": [
            {
              "type": "floatptr",
              "description": "A float at byte position # of this buffer",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Int64": {
          "forms": [
            {
              "type": "int64ptr",
              "description": "An int64 at byte position # of this buffer",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "String": {
          "forms": [
            {
              "type": "string",
              "description": "A string at byte position # of this buffer.  NULL if the string is not null-terminated within the size of the buffer",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Uint": {
          "forms": [
            {
              "type": "uintptr",
              "description": "A uint at byte position # of this buffer",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Bool": {
          "forms": [
            {
              "type": "boolptr",
              "description": "A bool at byte position # of this buffer",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Size": {
          "forms": [
            {
              "type": "uint",
              "description": "Size of the buffer"
            }
          ]
        }
      },
      "methods": {
        "Resize": {
          "forms": [
            {
              "description": "Resizes the buffer to this many bytes.  Minimum 1, maximum 4194304 (4MB) -- if you need larger for some reason, please let us know.  This is a sanity check",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Copy": {
          "forms": [
            {
              "description": "Copies # bytes from another buffer to position 1 of this buffer",
              "parameters": [
                {
                  "name": "buffer"
                },
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Initialize": {}
      },
      "initializer": {},
      "persistent": false,
      "asString": {}
    },
    "scriptobject": {},
    "event": {
      "variableType": "eventvar",
      "members": {
        "ID": {
          "forms": [
            {
              "type": "int",
              "description": "ID number of the event (used by modules)"
            }
          ]
        },
        "Name": {
          "forms": [
            {
              "type": "string",
              "description": "Name of the event"
            }
          ]
        }
      },
      "methods": {
        "Clear": {
          "forms": [
            {
              "description": "Forcefully detach all atoms and C functions from this event"
            }
          ]
        },
        "AttachAtom": {
          "forms": [
            {
              "description": "Attach an atom to this event",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        },
        "DetachAtom": {
          "forms": [
            {
              "description": "Detach an atom from this event",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        },
        "Unregister": {
          "forms": [
            {
              "description": "Unregister this event"
            }
          ]
        },
        "Execute": {
          "forms": [
            {
              "description": "Execute this event, optionally with any number of parameters",
              "parameters": [
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "ThisExecute": {
          "forms": [
            {
              "description": "Execute this event in the context of a given object, optionally with any number of parameters",
              "parameters": [
                {
                  "name": "object"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "New":{
          "forms": [
              {
                  "minimumBuild":7000,
                  "type":"event",
                  "parameters": [
                    {
                      "type":"string",
                      "name": "name"
                    }
                  ]
              }
          ]
        },
        "Get":{
          "forms": [
            {
                "minimumBuild":7000,
                "type":"event",
                "parameters": [
                  {
                    "type":"string",
                    "name": "name"
                  }
                ]
            }
        ]
        },
        "List":{
          "forms": [
            {
              "minimumBuild":7000,
              "type":"jsonarray",
              "parameters": [
                {
                  "optional": true,
                  "type":"jsonvalueref",
                  "name": "filterQuery",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      },
      "staticMethods": {
        "ForEach":{
          "forms": [
              {
                "minimumBuild":7003,
                  "parameters": [
                      {
                          "type":"string",
                          "name":"command"        
                      },
                      {
                          "type":"jsonvalueref",
                          "name": "filterQuery",
                          "optional": true,
                          "schema":{
                            "$ref":"#/definitions/select"
                          }
                      }    
                  ]
              }
          ]
        }
      }
    },
    "anonevent":{
      "minimumBuild":6947,
      "baseType": "event",
      "persistent": true,
      "description": "An anonymous event. Sort of like a masquerade, except it's a LavishScript event that has no Name or ID.",
      "initializer": {
        "forms": [
          {
            
          }
        ]
      }
    },
    "eventvar": {
      "baseType": "event",
      "description": "Registers a named event for the lifetime of the eventvar. The named event will be unregistered when the eventvar is destroyed.",
      "persistent": false,
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "type":"string",
                "name":"eventName"
              }
            ]
          }
        ]
      }
    },
    "query": {
      "members": {
        "Expression": {},
        "Test": {}
      }
    },
    "scriptobjecttype": {
      "members": {
        "Name": {
          "forms": [
            {
              "type":"string"
            }
          ]
        },
        "Inherits": {
          "forms": [
            {
              "minimumBuild":6951,
              "type":"string"
            }
          ]
        },
        "PersistentClass": {
          "forms": [
            {
              "minimumBuild":6951,
              "type":"string"
            }
          ]
        },
        "Member":{
          "name": "TRUE if a member (excluding variables) with the given name exists within the script object type (or inherited types)",
          "forms": [
            {
              "minimumBuild":6951,
              "type":"bool",
              "parameters": [
                {
                  "type":"string",
                  "name": "name"
                }
              ]
            }
          ]
        },
        "Method":{
          "name": "TRUE if a method with the given name exists within the script object type (or inherited types)",
          "forms": [
            {
              "minimumBuild":6951,
              "type":"bool",
              "parameters": [
                {
                  "type":"string",
                  "name": "name"
                }
              ]
            }
          ]
        },
        "Function":{
          "name": "TRUE if a function with the given name exists within the script object type (or inherited types)",
          "forms": [
            {
              "minimumBuild":6951,
              "type":"bool",
              "parameters": [
                {
                  "type":"string",
                  "name": "name"
                }
              ]
            }
          ]
        },
        "Members":{
          "forms": [
            {
              "minimumBuild":6951,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"bool",
                  "optional": true,
                  "default":true,
                  "name": "followIncludes"
                }
              ]
            }
          ]          
        },
        "Methods":{
          "forms": [
            {
              "minimumBuild":6951,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"bool",
                  "optional": true,
                  "default":true,
                  "name": "followIncludes"
                }
              ]
            }
          ]          
        },
        "VariableScope": {
          "forms": [
            {
              "minimumBuild":6997,
              "type":"variablescope",
              "description": "The Variable Scope containing static variables for this objectdef"
            }
          ]
        },        
        "Static":{
          "forms": [
            {
              "minimumBuild":6997,
              "type":"bool"
            }
          ]
        },
        "StaticMembers":{
          "forms": [
            {
              "minimumBuild":6991,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"bool",
                  "optional": true,
                  "default":true,
                  "name": "followIncludes"
                }
              ]
            }
          ]
        },
        "StaticMethods":{
          "forms": [
            {
              "minimumBuild":6991,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"bool",
                  "optional": true,
                  "default":true,
                  "name": "followIncludes"
                }
              ]
            }
          ]
        },
        "Functions":{
          "forms": [
            {
              "minimumBuild":6951,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"bool",
                  "optional": true,
                  "default":true,
                  "name": "followIncludes"
                }
              ]
            }
          ]          
        },
        "Metadata": {
          "forms": [
            {
              "type":"jsonobject"
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "minimumBuild":6951,
              "type":"jsonobject",
              "parameters": [
                {
                  "type":"bool",
                  "optional": true,
                  "default":true,
                  "name": "followIncludes"
                }
              ]
            }
          ]
        }
      },
      "asString": {
        "member": "Name"
      }
    },
    "scriptobjectref": {},
    "weakref": {
      "members": {
        "Reference": {}
      },
      "methods": {
        "SetReference": {}
      },
      "persistent": false
    },
    "objectcontainer": {
      "members": {
        "Size": {
          "forms": [
            {
              "type": "uint",
              "description": "Number of objects the container may possibly contain in its present state"
            }
          ]
        },
        "Used": {
          "forms": [
            {
              "type": "uint",
              "description": "Number of objects presently contained"
            }
          ]
        }
      },
      "methods": {
        "Clear": {
          "forms": [
            {
              "description": "Clears all objects from the container"
            }
          ]
        },
        "GetIterator": {
          "forms": [
            {
              "description": "Initializes the given [[ObjectType:iterator|iterator]] object for iteration of this container",
              "parameters": [
                {
                  "name": "object",
                  "type": "iterator"
                }
              ]
            }
          ]
        }
      }
    },
    "index": {
      "baseType": "objectcontainer",
      "usesSubType": true,
      "members": {
        "Next": {
          "forms": [
            {
              "type": "uint",
              "description": "Retrieves the ID of the next valid element in the index, given an ID number",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Get": {
          "forms": [
            {
              "type": "sub-type",
              "description": "Retrieves the #th element in the index",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Insert": {
          "forms": [
            {
              "type": "uint",
              "description": "Inserts an element in the index.  The parameters will be passed to the object initialization routine for the index sub-type, and an object will be created.  The returned value is the ID of the new element.  The index will be resized to fit the new object if necessary.",
              "parameters": [
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Expand": {
          "forms": [
            {
              "type": "mutablestring",
              "description": "Retrieves the text representation of each existing object in the index as quoted parameters, separated by spaces.  If no parameters are given to Expand, the entire index will be used.  If only the begin # is used, the rest of the index, beginning with the element # specified, will be used.  If the length is additionally given, that number of elements from the index will be used, beginning with the element # specified as the beginning.",
              "parameters": [
                {
                  "name": "beginNum",
                  "type": "uint"
                },
                {
                  "name": "length",
                  "type":"uint"
                }
              ]
            }
          ]
        },
        "ExpandComma": {
          "forms": [
            {
              "type": "mutablestring",
              "description": "Retrieves the text representation of each existing object in the index as quoted parameters, separated by commas.  If no parameters are given to Expand, the entire index will be used.  If only the begin # is used, the rest of the index, beginning with the element # specified, will be used.  If the length is additionally given, that number of elements from the index will be used, beginning with the element # specified as the beginning.",
              "parameters": [
                {
                  "name": "beginNum",
                  "type": "uint"
                },
                {
                  "name": "length",
                  "type":"uint"
                }
              ]
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "unistring",
              "description": "Returns a JSON array representation of this index, with each element converted by using its AsJSON member"
            }
          ]
        },
        "SelectKey":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"int64",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectKeys":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectValue":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"object",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "Shift": {
          "forms": [
            {
              "description": "Makes room for # places elements at # position, by shifting toward index.Size. The index will not be implicitly Resized, and elements at the end of the index may be destroyed.",
              "parameters": [
                {
                  "name": "position",
                  "type": "uint"
                },
                {
                  "name": "places",
                  "type": "uint"
                }
              ]
            }
          ]
        },
        "Sort": {},
        "Remove": {
          "forms": [
            {
              "description": "Removes a single element from the index, by ID",
              "parameters": [
                {
                  "name": "id",
                  "type":"uint"
                }
              ]
            }
          ]
        },
        "RemoveByQuery": {
          "forms": [
            {
              "description": "Erases any elements in the index matching the given [[LavishScript:Object_Queries|Query]]",
              "parameters": [
                {
                  "name": "query_id",
                  "type": "uint"
                }
              ]
            },
            {
              "description": "Erases any elements in the index that either match or do not match the given [[LavishScript:Object_Queries|Query]]",
              "parameters": [
                {
                  "name": "query_id",
                  "type": "uint"
                },
                {
                  "name": "remove_MATCHES",
                  "type": "bool"
                }
              ]
            }
          ]
        },
        "Collapse": {
          "forms": [
            {
              "description": "Removes gaps in the index (from removal of elements) by shifting elements toward 1"
            }
          ]
        },
        "Move": {
          "forms": [
            {
              "description": "Moves an element to a new position in the index, by ID numbers.  If an element exists in the new position, it is destroyed",
              "parameters": [
                {
                  "name": "#"
                },
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Swap": {
          "forms": [
            {
              "description": "Swaps two positions in the index",
              "parameters": [
                {
                  "name": "#"
                },
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "description": "Creates a new element in the index at the given position (destroying the previous element, if it existed).  The additional parameters will be passed to the object initialization routine for the index sub-type, and an object will be created.",
              "parameters": [
                {
                  "name": "#"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Insert": {
          "forms": [
            {
              "description": "Inserts an element in the index.  The parameters will be passed to the object initialization routine for the index sub-type, and an object will be created.  The index will be resized to fit the new object if necessary.",
              "parameters": [
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Resize": {
          "forms": [
            {
              "description": "Resizes the index such that it will hold at least this number of elements.",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "FromJSON": {
          "forms": [
            {
              "description": "Initializes an index of objects from JSON. Each object must accept a JSON value.",
              "parameters": [
                {
                  "greedy": true,
                  "type":"string",
                  "name": "initializerParams",
                  "optional": true
                },
                {
                  "type":"string",
                  "name": "JSON initializer"
                }
              ]
            }
          ]
        },
        "NativeFromJSON":{
          "forms": [
            {
              "minimumBuild":6947,
              "description": "Initializes an index of objects from JSON. Each object must accept a native value.",
              "parameters": [
                {
                  "greedy": true,
                  "type":"string",
                  "name": "initializerParams",
                  "optional": true
                },
                {
                  "type":"string",
                  "name": "JSON initializer"
                }
              ]
            }
          ]
        },
        "ForEach": {
          "forms": [
            {
              "description": "For each element in the index, performs the specified code. The [[TLO:ForEach|ForEach Top-Level Object]] is used to access the Key or Value for each iteration",
              "parameters": [
                {
                  "name": "command",
                  "type": "string"
                },
                {
                  "optional": true,                  
                  "name": "filterQuery",
                  "type": "jsonvalueref",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "collection": {
      "baseType": "objectcontainer",
      "usesSubType": true,
      "members": {
        "Element": {
          "forms": [
            {
              "type": "sub-type",
              "description": "Retrieves the element, if any, identified by the given key",
              "parameters": [
                {
                  "type":"string",
                  "name": "key"
                }
              ]
            }
          ]
        },
        "Get": {
          "forms": [
            {
              "type":"sub-type",
              "description": "Retrieves the element, if any, identified by the given key",
              "parameters": [
                {
                  "type":"string",
                  "name": "key"
                }
              ]
            }
          ]
        },
        "FirstValue": {
          "forms": [
            {
              "type": "sub-type",
              "description": "Begins iterating with an internal iterator, and retrieves the first value"
            }
          ]
        },
        "NextValue": {
          "forms": [
            {
              "type": "sub-type",
              "description": "Continues iterating with an internal iterator, retrieving the next value"
            }
          ]
        },
        "FirstKey": {
          "forms": [
            {
              "type": "string",
              "description": "Begins iterating with an internal iterator, and retrieves the first key"
            }
          ]
        },
        "NextKey": {
          "forms": [
            {
              "type": "string",
              "description": "Continues iterating with an internal iterator, retrieving the next key"
            }
          ]
        },
        "CurrentKey": {
          "forms": [
            {
              "type": "string",
              "description": "Retrieves the current key in the iteration (with an internal iterator)"
            }
          ]
        },
        "CurrentValue": {
          "forms": [
            {
              "type": "sub-type",
              "description": "Retrieves the current value in the iteration (with an internal iterator)"
            }
          ]
        },
        "Keys":{
          "forms": [
            {
              "type":"jsonarray",
              "minimumBuild":6947,
              "description": "A jsonarray of keys in the collection",
              "parameters": [
                {
                  "optional": true,
                  "type":"jsonvalueref",
                  "name": "filterQuery",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "unistring",
              "description": "Returns a JSON object representation of this collection, with each element converted by using its AsJSON member. The keys from the collection will be used as keys in the JSON object"
            },
            {
              "type": "unistring",
              "description": "Returns a JSON array representation of this collection, with each element converted by using its AsJSON member.",
              "parameters": [
                {
                  "constant": "array",
                  "type":"string"
                }
              ]
            }
          ]
        },
        "SelectKey":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"string",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectKeys":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectValue":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"object",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "Set": {
          "forms": [
            {
              "description": "Sets (adding, if necessary) the element identified by the given key with the given value",
              "parameters": [
                {
                  "type":"string",
                  "name": "key"
                },
                {
                  "greedy": true,
                  "type":"array",
                  "name": "initializer",
                  "optional": true
                }
              ]
            }
          ]
        },
        "FromJSON": {
          "forms": [
            {
              "description": "Initializes a collection of objects from JSON. Each object must accept a JSON value.",
              "parameters": [
                {
                  "greedy": true,
                  "type":"string",
                  "name": "initializerParams",
                  "optional": true
                },
                {
                  "type":"string",
                  "name": "JSON initializer"
                }
              ]
            }
          ]
        },
        "NativeFromJSON":{
          "forms": [
            {
              "minimumBuild":6947,
              "description": "Initializes a collection of objects from JSON. Each object must accept a native value.",
              "parameters": [
                {
                  "greedy": true,
                  "type":"string",
                  "name": "initializerParams",
                  "optional": true
                },
                {
                  "type":"string",
                  "name": "JSON initializer"
                }
              ]
            }
          ]
        },
        "Erase": {
          "forms": [
            {
              "description": "Erases the element, if any, identified by the given key",
              "parameters": [
                {
                  "name": "key"
                }
              ]
            }
          ]
        },
        "EraseByQuery": {
          "forms": [
            {
              "description": "Erases any elements in the collection matching the given [[LavishScript:Object_Queries|Query]]",
              "parameters": [
                {
                  "name": "query_id",
                  "type": "uint"
                }
              ]
            },
            {
              "description": "Erases any elements in the collection that either match or do not match the given [[LavishScript:Object_Queries|Query]]",
              "parameters": [
                {
                  "name": "query_id",
                  "type": "uint"
                },
                {
                  "name": "remove_MATCHES",
                  "type": "bool"
                }
              ]
            }
          ]
        },
        "ForEach": {
          "forms": [
            {
              "description": "For each element in the collection, performs the specified code. The [[TLO:ForEach|ForEach Top-Level Object]] is used to access the Key or Value for each iteration",
              "parameters": [
                {
                  "name": "command",
                  "type": "string"
                },
                {
                  "optional": true,                  
                  "name": "filterQuery",
                  "type": "jsonvalueref",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "stack": {
      "baseType": "objectcontainer",
      "usesSubType": true,
      "members": {
        "Top": {
          "forms": [
            {
              "type": "sub-type",
              "description": "Retrieves the first object in the stack"
            }
          ]
        }
      },
      "methods": {
        "Push": {
          "forms": [
            {
              "description": "Adds an object to the stack, passing any parameters to the initialization for the given object type",
              "parameters": [
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Pop": {
          "forms": [
            {
              "description": "Removes the first object in the stack"
            }
          ]
        }
      }
    },
    "queue": {
      "baseType": "objectcontainer",
      "members": {
        "Peek": {
          "forms": [
            {
              "type": "sub-type",
              "description": "Retrieves the first object in the queue (first in line)"
            }
          ]
        }
      },
      "methods": {
        "Queue": {
          "forms": [
            {
              "description": "Adds an object to the queue, passing any parameters to the initialization for the given object type",
              "parameters": [
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Dequeue": {
          "forms": [
            {
              "description": "Removes the first object in the queue"
            }
          ]
        }
      }
    },
    "set": {
      "baseType": "objectcontainer",
      "members": {
        "Contains": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the given key exists in the set",
              "parameters": [
                {
                  "type":"string",
                  "name": "key"
                }
              ]
            }
          ]
        },
        "FirstKey": {},
        "NextKey": {},
        "CurrentKey": {},
        "AsJSON": {
          "forms": [
            {
              "type": "unistring",
              "description": "Returns a JSON array representation of this array, with each element converted by using its AsJSON member"
            }
          ]
        }
      },
      "methods": {
        "Add": {
          "forms": [
            {
              "description": "Adds a given key to the set",
              "parameters": [
                {
                  "type":"string",
                  "name": "key"
                }
              ]
            }
          ]
        },
        "Remove": {
          "forms": [
            {
              "description": "Removes a given key from the set",
              "parameters": [
                {
                  "type":"string",
                  "name": "key"
                }
              ]
            }
          ]
        },
        "Erase":{
          "forms": [
            {
              "description": "Removes a given key from the set",
              "parameters": [
                {
                  "type":"string",
                  "name":"key"
                }
              ]
            }
          ]
        },
        "Merge": {},
        "Intersect": {
          "forms": [
            {
              "description": "Adds \"sets A and intersect B\" to this set",
              "parameters": [
                {
                  "name": "A",
                  "type": "set"
                },
                {
                  "name": "B",
                  "type": "set"
                }
              ]
            }
          ]
        },
        "Union": {
          "forms": [
            {
              "description": "Adds \"set A union B\" to this set",
              "parameters": [
                {
                  "name": "A",
                  "type": "set"
                },
                {
                  "name": "B",
                  "type": "set"
                }
              ]
            }
          ]
        },
        "Not": {
          "forms": [
            {
              "description": "Adds \"set A not B\" to this set",
              "parameters": [
                {
                  "name": "A",
                  "type": "set"
                },
                {
                  "name": "B",
                  "type": "set"
                }
              ]
            }
          ]
        },
        "ForEach": {
          "forms": [
            {
              "description": "For each element in the set, performs the specified code. The [[TLO:ForEach|ForEach Top-Level Object]] is used to access the Value for each iteration",
              "parameters": [
                {
                  "name": "command",
                  "type": "string"
                },
                {
                  "optional": true,                  
                  "name": "filterQuery",
                  "type": "jsonvalueref",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "keyvaluepair": {
      "members": {
        "Key": {},
        "Value": {}
      },
      "persistent": false
    },
    "iterator": {
      "members": {
        "Target": {
          "forms": [
            {
              "type": "object",
              "description": "The iteration target object (such as a set or collection being iterated).  The object type will be the original object type of the object"
            }
          ]
        },
        "Key": {
          "forms": [
            {
              "type": "?",
              "description": "The current key in the iteration.  The object type depends on the data being iterated."
            }
          ]
        },
        "Value": {
          "forms": [
            {
              "type": "object",
              "description": "The current value in the iteration.  The object type depends on the data being iterated."
            }
          ]
        },
        "IsValid": {
          "forms": [
            {
              "type": "bool",
              "description": "Determines if the iterator is valid, pointing to a valid iteration target and key/value"
            }
          ]
        },
        "Reversible": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the list being iterated also goes backwards, thus making the Previous method valid"
            }
          ]
        },
        "Constant": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the list will not allow you to set object values (i.e. the values are constant)"
            }
          ]
        },
        "RandomAccess": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the list allows random access (the iterator:Jump method)"
            }
          ]
        }
      },
      "methods": {
        "First": {
          "forms": [
            {
              "description": "Sets the iterator position to the first element"
            }
          ]
        },
        "Last": {
          "forms": [
            {
              "description": "Sets the iterator position to the last element"
            }
          ]
        },
        "Next": {
          "forms": [
            {
              "description": "Sets the iterator position to the next element (continues iteration forward)"
            }
          ]
        },
        "Previous": {
          "forms": [
            {
              "description": "Sets the iterator position to the previous element (continues iteration backward)"
            }
          ]
        },
        "JumpTo": {
          "forms": [
            {
              "parameters": [
                {
                  "name": "key",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "SetValue": {
          "forms": [
            {
              "description": "Sets the value at the current iterator position",
              "parameters": [
                {
                  "name": "newValue",
                  "type": "string"
                }
              ]
            }
          ]
        }
      },
      "persistent": false
    },
    "variablescope": {
      "methods": {
        "CreateVariable": {
          "forms": [
            {
              "description": "Creates a new variable in this scope of the given object type and name.  Any extra parameters are passed to object initialization",
              "parameters": [
                {
                  "name": "type",
                  "type": "object"
                },
                {
                  "type":"string",
                  "name": "name"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "DeleteVariable": {
          "forms": [
            {
              "description": "Deletes the variable in this scope with the given name, if any",
              "parameters": [
                {
                  "type":"string",
                  "name": "name"
                }
              ]
            }
          ]
        },
        "Clear": {
          "forms": [
            {
              "description": "Deletes all variables within this scope"
            }
          ]
        },
        "GetIterator": {
          "forms": [
            {
              "description": "Initializes the given [[ObjectType:iterator|iterator]] object for iteration of this variable scope",
              "parameters": [
                {
                  "name": "object",
                  "type": "iterator"
                }
              ]
            }
          ]
        },
        "ForEach": {
          "forms": [
            {
              "description": "For each variable in the scope, performs the specified code. The [[TLO:ForEach|ForEach Top-Level Object]] is used to access the Key or Value for each iteration",
              "parameters": [
                {
                  "name": "command",
                  "type": "string"
                },
                {
                  "optional": true,                  
                  "name": "filterQuery",
                  "type": "jsonvalueref",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      },
      "members": {
        "SelectKey":{
          "forms": [
            {
              "minimumBuild":7000,
              "type":"string",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query"
                }
              ]
            }
          ]
        },
        "Keys":{
          "forms": [
            {
              "minimumBuild":7000,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query"
                }
              ]
            }
          ]
        },
        "SelectKeys":{
          "forms": [
            {
              "minimumBuild":7000,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectValue":{
          "forms": [
            {
              "minimumBuild":7000,
              "type":"object",
              "parameters": [
                {
                  "type":"object",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "AsJSON":{
          "forms": [
            {
              "minimumBuild":7000,
              "type":"jsonobject"
            }
          ]          
        }
      }
    },
    "enumtype": {
      "members": {
        "Name": {
          "forms": [
            {
              "type": "string",
              "description": "Name of the enum type"
            }
          ]
        },
        "ValueByName": {
          "forms": [
            {
              "type": "int64",
              "description": "Retrieves a value by its name",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        },
        "NameByValue": {
          "forms": [
            {
              "type": "string",
              "description": "Retrieves a name by a given value (or for flags, a set of names from the combined value)",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Names":{
          "forms": [
            {
              "type":"jsonarray"
            }
          ]
        },
        "Values":{
          "forms": [
            {
              "type":"jsonarray"
            }
          ]
        },
        "AsJSON":{
          "forms": [
            {
              "type":"jsonobject"
            }
          ]
        }
      },
      "methods": {
        "SetValue": {
          "forms": [
            {
              "description": "Assigns a value to a given name",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "GetIterator": {
          "forms": [
            {
              "description": "Sets an iterator for iterating the available values",
              "parameters": [
                {
                  "type": "iterator"
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "New":{
          "forms": [
            {
                "minimumBuild":7000,
                "type":"enumtype",
                "parameters": [
                  {
                    "type":"jsonvalueref",
                    "name": "enumDefinition"
                  }
                ]
            }
          ]
        },
        "Get":{
          "forms": [
            {
                "minimumBuild":7000,
                "type":"enumtype",
                "parameters": [
                  {
                    "type":"string",
                    "name": "name"
                  }
                ]
            }
          ]
        },
        "List":{
          "forms": [
            {
                "minimumBuild":7000,
                "type":"jsonarray",
                "parameters": [
                  {
                    "type":"jsonvalueref",
                    "name": "filterQuery",
                    "schema":{
                      "$ref":"#/definitions/select"
                    }
                  }
                ]
            }
          ]
        }
      },
      "staticMethods": {
        "ForEach":{
          "forms": [
              {
                "minimumBuild":7003,
                  "parameters": [
                      {
                          "type":"string",
                          "name":"command"        
                      },
                      {
                          "type":"jsonvalueref",
                          "name": "filterQuery",
                          "optional": true,
                          "schema":{
                            "$ref":"#/definitions/select"
                          }
                      }    
                  ]
              }
          ]
        }
      },
      "persistent": false,
      "asString": {}
    },
    "enumvaluetype":{
      "members": {
        "Value":{
          "forms": [
            {
              "type":"int64"
            }
          ]
        },
        "Name":{
          "forms": [
            {
              "type":"string"
            }
          ]
        },
        "Type":{
          "forms": [
            {
              "minimumBuild":7024,
              "type": "enumtype"
            }
          ]
        }
      },
      "methods": {
        "Set":{
          "forms": [
            {
              "parameters": [
                {
                  "type":"int64"
                }
              ]
            },
            {
              "parameters": [
                {
                  "type":"string"
                }
              ]
            }  
          ]
        }
      },
      "staticMembers": {
        "Get":{
          "forms": [
            {
              "minimumBuild":7024,
              "type":"enumvaluetype",
              "parameters": [
                {
                  "type":"string"
                }
              ]
            },
            {
              "minimumBuild":7024,
              "type":"enumvaluetype",
              "parameters": [
                {
                  "type":"int64"
                }
              ]
            }
          ]
        },
        "List":{
          "forms": [
            {
              "minimumBuild":7024,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "filterQuery",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]  
            }
          ]         
        },
        "EnumAsJSON":{
          "forms": [
            {
              "minimumBuild":7024,
              "type":"jsonobject"
            }
          ]
        }
      },
      "staticMethods": {
        "ForEach":{
          "forms": [
              {
                "minimumBuild":7024,
                  "parameters": [
                      {
                          "type":"string",
                          "name":"command"        
                      },
                      {
                          "type":"jsonvalueref",
                          "name": "filterQuery",
                          "optional": true,
                          "schema":{
                            "$ref":"#/definitions/select"
                          }
                      }    
                  ]
              }
          ]          
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "type":"int64"
              }
            ]
          },
          {
            "parameters": [
              {
                "type":"string"
              }
            ]
          }
        ]
      },
      "asString": {
        "description": "The Name(s) for the current value, if possible. Otherwise, the int64 value"
      },
      "description": "All enum value types are an instance of this type"
    },
    "jsonvalue": {
      "variableType": "jsonvaluecontainer",
      "members": {
        "AsString": {
          "forms": [
            {
              "type": "string",
              "description": "The contained value as a string"
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "unistring",
              "description": "The contained value as multiline JSON text. multiline is literal, e.g. ${MyValue.AsJSON[multiline]}",
              "parameters": [
                {
                  "type": "string",
                  "constant": "multiline",
                  "optional": true
                }
              ]
            },
            {
              "type": "string",
              "description": "The contained value as single-line JSON text"
            }
          ]
        },
        "Type": {
          "forms": [
            {
              "type": "string",
              "description": "The type of JSON object stored; one of: null, object, string, number, array, boolean, integer. Note that while the JSON standard does not differentiate between floating-point numbers and integers, LavishScript does"
            }
          ]
        },
        "Value": {
          "forms": [
            {
              "type": "object",
              "description": "The contained value"
            }
          ]
        }
      },
      "methods": {
        "WriteFile": {
          "forms": [
            {
              "description": "Writes the JSON to file, optionally in multi-line form, with a specified line splitter",
              "parameters": [
                {
                  "name": "filePath",
                  "type": "string"
                },
                {
                  "type": "string",
                  "constant": "multiline",
                  "optional": true
                },
                {
                  "name": "lineSplit",
                  "type": "string",
                  "optional": true,
                  "default": "\\r\\n"
                }
              ]
            },
            {
              "description": "Writes the JSON to file, in condensed single-line form.",
              "parameters": [
                {
                  "name": "filename"
                }
              ]
            },
            {
              "description": "Writes the JSON to file, optionally in multi-line form, with \"\\r\\n\" (Windows) line splitting",
              "parameters": [
                {
                  "name": "filename"
                },
                {
                  "name": "multiline"
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "New":{
          "forms": [
            {
              "minimumBuild":7025,
              "type":"jsonvalue",
              "parameters": [
                {
                  "type":"string",
                  "constant": "-lazy",
                  "optional": true
                },
                {
                  "type":"string",
                  "name":"json"
                }
              ]
            }
          ]
        },
        "ParseFile":{
          "forms": [
            {
              "minimumBuild":7025,
              "type":"jsonvalue",
              "parameters": [
                {
                  "type":"filepath",
                  "name": "filename"
                }
              ]
            }
          ]
        }
      },
      "asString": {
        "description": "JSON representation of the value"
      }
    },
    "jsoniterator": {
      "members": {
        "Target": {
          "forms": [
            {
              "type": "jsonvalue"
            }
          ]
        },
        "Key": {
          "forms": [
            {}
          ]
        },
        "Value": {
          "forms": [
            {
              "type": "jsonvalue"
            }
          ]
        },
        "IsValid": {
          "forms": [
            {
              "type": "bool"
            }
          ]
        },
        "Reversible": {
          "forms": [
            {
              "type": "bool"
            }
          ]
        },
        "Constant": {
          "forms": [
            {
              "type": "bool"
            }
          ]
        },
        "RandomAccess": {
          "forms": [
            {
              "type": "bool"
            }
          ]
        }
      },
      "methods": {
        "First": {
          "forms": [
            {}
          ]
        },
        "Last": {
          "forms": [
            {}
          ]
        },
        "Next": {
          "forms": [
            {}
          ]
        },
        "Previous": {
          "forms": [
            {}
          ]
        },
        "JumpTo": {
          "forms": [
            {
              "parameters": [
                {
                  "name": "key",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "SetValue": {
          "forms": [
            {
              "parameters": [
                {
                  "name": "newValue",
                  "type": "jsonvalue"
                }
              ]
            }
          ]
        }
      },
      "persistent": false
    },
    "jsonvaluecontainer": {
      "baseType": "jsonvalue",
      "members": {
        "AsString": {
          "forms": [
            {
              "type": "string",
              "description": "The contained value as a string"
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "unistring",
              "description": "The contained value as multiline JSON text",
              "parameters": [
                {
                  "type": "string",
                  "constant": "multiline",
                  "optional": true
                }
              ]
            },
            {
              "type": "string",
              "description": "The contained value as single-line JSON text"
            }
          ]
        },
        "Type": {
          "forms": [
            {
              "type": "string",
              "description": "The type of JSON object stored; one of: null, object, string, number, array, true, false, integer. Note that while the JSON standard does not differentiate between floating-point numbers and integers, LavishScript does"
            }
          ]
        },
        "Value": {
          "forms": [
            {
              "type": "jsonvaluecontainer",
              "description": "The contained value"
            }
          ]
        }
      },
      "methods": {
        "SetValue": {
          "forms": [
            {
              "parameters": [
                {
                  "type": "string",
                  "constant": "-lazy",
                  "optional": true
                },
                {
                  "name": "newValue",
                  "type": "jsonvalue"
                }
              ]
            },
            {
              "description": "Sets the contained json value, e.g. myJsonValueContainer:SetValue[\"{\\\"someValue\\\":17}\"] will set myJsonValueContainers value to a jsonobject that in turn contains one value",
              "parameters": [
                {
                  "name": "json"
                }
              ]
            }
          ]
        },
        "ParseFile": {
          "forms": [
            {
              "description": "Sets the contained json value to the contents of a specified json file",
              "parameters": [
                {
                  "name": "filename",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "ImportINI":{
          "forms": [
            {
              "description": "Sets the contained json value to the contents of a specified INI file converted to json",
              "parameters": [
                {
                  "name":"filename",
                  "type":"string"
                }
              ],
              "minimumBuild":6838
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "newValue",
                "type": "jsonvalue",
                "optional": true,
                "default":null
              }
            ]
          }
        ]
      },
      "asString": {
        "description": "JSON representation of the value"
      }
    },
    "jsonvalueref": {
      "members": {
        "Reference": {
          "forms": [
            {
              "type": "jsonvalue"
            }
          ]
        }
      },
      "methods": {
        "SetReference": {
          "forms": [
            {
              "parameters": [
                {
                  "name": "jsonValue",
                  "type": "weakref"
                }
              ]
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            "parameters": [
              {
                "name": "jsonValue",
                "type": "weakref",
                "optional": true,
                "default":null
              }
            ]
          },
          {
            "minimumBuild":7000,
            "parameters": [
              {
                "name": "json",
                "type":"jsonobject"
              }
            ]
          },
          {
            "minimumBuild":7000,
            "parameters": [
              {
                "name": "json",
                "type":"jsonarray"
              }
            ]
          }
        ]
      },
      "asString": {
        "description": "JSON representation of the referenced value"
      }
    },
    "jsonarray": {
      "members": {
        "Duplicate":{
          "forms": [
            {
              "type":"jsonarray",
              "minimumBuild":7035,
              "description": "Returns a deep copy (completely new and separate clone) of the array"
            }
          ]
        },
        "Get": {
          "forms": [
            {
              "type": "object",
              "description": "Gets a value stored within this array, by its index (1-based)",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "object",
              "description": "Gets a stored value multiple levels deep within jsonarrays and/or jsonobjects",
              "parameters": [
                {
                  "name": "#"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "object",
              "minimumBuild":7042,
              "description": "Gets a stored value multiple levels deep within jsonarrays and/or jsonobjects, with a default value if not found",
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "constant": "-default",
                  "followingParameters": [
                    {
                      "type": "jsonvalue",
                      "name": "defaultValue"
                    }
                  ]
                },
                {
                  "name": "#"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetContainer": {
          "forms": [
            {
              "minimumBuild":7036,
              "type": "jsonvaluecontainer",
              "description": "Gets a jsonvaluecontainer which holds a value within this array",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "jsonvaluecontainer",
              "description": "Gets a jsonvaluecontainer multiple levels deep within jsonobjects and/or jsonarrays",
              "parameters": [
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetNumber": {
          "forms": [
            {
              "minimumBuild":6921,
              "type": "float64",
              "description": "Gets a value stored within this array, by its index (1-based)",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "minimumBuild":6921,
              "type": "float64",
              "description": "Gets a stored value multiple levels deep within jsonarrays and/or jsonobjects",
              "parameters": [
                {
                  "name": "#"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "float64",
              "minimumBuild":7042,
              "description": "Gets a stored value multiple levels deep within jsonarrays and/or jsonobjects, with a default value if not found",
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "constant": "-default",
                  "followingParameters": [
                    {
                      "type": "jsonvalue",
                      "name": "defaultValue"
                    }
                  ]
                },
                {
                  "name": "#"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetInteger": {
          "forms": [
            {
              "minimumBuild":6921,
              "type": "int64",
              "description": "Gets a value stored within this array, by its index (1-based)",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "minimumBuild":6921,
              "type": "int64",
              "description": "Gets a stored value multiple levels deep within jsonarrays and/or jsonobjects",
              "parameters": [
                {
                  "name": "#"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "int64",
              "minimumBuild":7042,
              "description": "Gets a stored value multiple levels deep within jsonarrays and/or jsonobjects, with a default value if not found",
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "constant": "-default",
                  "followingParameters": [
                    {
                      "type": "jsonvalue",
                      "name": "defaultValue"
                    }
                  ]
                },
                {
                  "name": "#"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetBool": {
          "forms": [
            {
              "minimumBuild":6921,
              "type": "bool",
              "description": "Gets a value stored within this array, by its index (1-based)",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "minimumBuild":6921,
              "type": "bool",
              "description": "Gets a stored value multiple levels deep within jsonarrays and/or jsonobjects",
              "parameters": [
                {
                  "name": "#"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "bool",
              "minimumBuild":7042,
              "description": "Gets a stored value multiple levels deep within jsonarrays and/or jsonobjects, with a default value if not found",
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "constant": "-default",
                  "followingParameters": [
                    {
                      "type": "jsonvalue",
                      "name": "defaultValue"
                    }
                  ]
                },
                {
                  "name": "#"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetType":{
          "forms": [
            {
              "minimumBuild":6952,
              "type": "string",
              "description": "Gets the Type of a value stored within this array, by its index (1-based)",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Size": {
          "forms": [
            {
              "type": "uint",
              "description": "Allocated capacity of the array"
            }
          ]
        },
        "Used": {
          "forms": [
            {
              "type": "uint",
              "description": "Total number of values currently in the array"
            }
          ]
        },
        "Type": {
          "forms": [
            {
              "type": "string"
            }
          ]
        },
        "AsString": {
          "forms": [
            {
              "type": "string"
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "unistring",
              "parameters": [
                {
                  "type": "string",
                  "constant": "multiline",
                  "optional": true
                }
              ]
            }
          ]
        },
        "Value": {
          "forms": [
            {
              "type": "jsonarray"
            }
          ]
        },
        "SelectKey":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"int64",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query"
                }
              ]
            },
            {
              "minimumBuild":6995,
              "type":"int64",
              "parameters": [
                {
                  "type":"jsonobject",
                  "name": "query"
                }
              ]
            }
          ]
        },
        "SelectKeys":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectValue":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"jsonvalue",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectValues":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "Reverse":{
          "forms": [
            {
              "minimumBuild":7003,
              "type":"jsonarray",
              "description": "Gives a new jsonarray which re-references json values in reverse order"
            }
          ]
        }
      },
      "methods": {
        "GetIterator": {
          "forms": [
            {
              "description": "Sets a jsoniterator to iterate this JSON array",
              "parameters": [
                {
                  "name": "iteratorObject",
                  "type": "weakref"
                }
              ]
            }
          ]
        },
        "Clear": {
          "forms": [
            {
              "description": "Clears all values from the array"
            }
          ]
        },
        "Insert": {
          "forms": [
            {
              "minimumBuild":7003,
              "parameters": [
                {
                  "type": "string",
                  "constant": "-lazy",
                  "optional": true
                },
                {
                  "name": "key",
                  "type": "inr64"
                },
                {
                  "name": "newValue",
                  "type": "jsonvalue"
                }
              ]
            },
            {
              "minimumBuild":7003,
              "description": "Sets a value within the array, to a new JSON value of any type, e.g. <tt>myJsonArray:Set[1,\"{\\\"subValue\\\":12}\"]</tt>",
              "parameters": [
                {
                  "name": "key",
                  "type":"int64"
                },
                {
                  "name": "json",
                  "type":"jsonvalue"
                }
              ]
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "parameters": [
                {
                  "type": "string",
                  "constant": "-lazy",
                  "optional": true
                },
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                },
                {
                  "name": "newValue",
                  "type": "jsonvalue"
                }
              ]
            },
            {
              "description": "Sets a value within the array, to a new JSON value of any type, e.g. <tt>myJsonArray:Set[1,\"{\\\"subValue\\\":12}\"]</tt>",
              "parameters": [
                {
                  "name": "key",
                  "type":"uint"
                },
                {
                  "name": "json",
                  "type":"jsonvalue"
                }
              ]
            }
          ]
        },
        "SetByRef":{
          "forms": [
            {
              "minimumBuild":6921,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"jsonvalueref",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "InsertByRef":{
          "forms": [
            {
              "minimumBuild":7003,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"jsonvalueref",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "AddByRef":{
          "forms": [
            {
              "minimumBuild":6921,
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetString":{
          "forms":[
            {
              "description": "Sets a value within the array, to a new string value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"string",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetInteger":{
          "forms":[
            {
              "description": "Sets a value within the array, to a new integer (int64) value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"int64",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetNumber":{
          "forms":[
            {
              "description": "Sets a value within the array, to a new number (float64) value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"float64",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetBool":{
          "forms":[
            {
              "description": "Sets a value within the array, to a new boolean value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"bool",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetNULL":{
          "forms":[
            {
              "description": "Sets a value within the array, to a null value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                }
              ]
            }
          ]
        },
        "InsertString":{
          "forms":[
            {
              "description": "Inserts a string value within the array",
              "minimumBuild":7003,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"string",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "InsertInteger":{
          "forms":[
            {
              "description": "Inserts an integer (int64) value within the array",
              "minimumBuild":7003,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"int64",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "InsertNumber":{
          "forms":[
            {
              "description": "Inserts a number (float64) value within the array",
              "minimumBuild":7003,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"float64",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "InsertBool":{
          "forms":[
            {
              "description": "Inserts a boolean value within the array",
              "minimumBuild":7003,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"bool",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "InsertNULL":{
          "forms":[
            {
              "description": "Inserts a null value within the array",
              "minimumBuild":7003,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                }
              ]
            }
          ]
        },
        "Add": {
          "forms": [
            {
              "description": "Adds a value to the end of the array, to a new JSON value of any type, e.g. <tt>myJsonArray:Add[\"{\\\"subValue\\\":12}\"]</tt>",
              "parameters": [
                {
                  "name": "newValue",
                  "type": "jsonvalue"
                }
              ]
            }
          ]
        },
        "AddString":{
          "forms":[
            {
              "description": "Adds a string value to the end of the array",
              "minimumBuild":6951,
              "parameters": [
                {
                  "type":"string",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "AddInteger":{
          "forms":[
            {
              "description": "Adds a new integer value to the end of the array",
              "minimumBuild":6951,
              "parameters": [
                {
                  "type":"int64",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "AddNumber":{
          "forms":[
            {
              "description": "Adds a new number (float64) value to the end of the array",
              "minimumBuild":6951,
              "parameters": [
                {
                  "type":"float64",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "AddBool":{
          "forms":[
            {
              "description": "Adds a new boolean value to the end of the array",
              "minimumBuild":6951,
              "parameters": [
                {
                  "type":"uint",
                  "name":"key"
                },
                {
                  "type":"bool",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "AddNULL":{
          "forms":[
            {
              "description": "Adds a null value to the end of the array",
              "minimumBuild":6951
            }
          ]
        },
        "Sort": {
          "forms": [
            {
              "parameters": [
                {
                  "name": "keyProperty",
                  "type": "string",
                  "optional": true
                }
              ]
            }
          ]
        },
        "Erase": {
          "forms": [
            {
              "description": "Erases the nth value from the array, shifting later items toward 0",
              "parameters": [
                {
                  "name": "key",
                  "type": "uint"
                }
              ]
            }
          ]
        },
        "EraseByQuery": {
          "forms": [
            {
              "description": "Erases items either matching or not matching the query from the array (depending on the 2nd parameter), shifting later elements toward 0",
              "parameters": [
                {
                  "name": "queryText",
                  "type": "string"
                },
                {
                  "name": "removeMatches",
                  "type": "bool",
                  "optional": true,
                  "default": true
                }
              ]
            },
            {
              "description": "Erases items matching the query from the array, shifting later elements toward 0",
              "parameters": [
                {
                  "name": "ID",
                  "type": "Query"
                }
              ]
            }
          ]
        },
        "WriteFile": {
          "forms": [
            {
              "parameters": [
                {
                  "name": "filePath",
                  "type": "string"
                },
                {
                  "type": "string",
                  "constant": "multiline",
                  "optional": true
                },
                {
                  "name": "lineSplit",
                  "type": "string",
                  "optional": true,
                  "default": "\\r\\n"
                }
              ]
            }
          ]
        },
        "ForEach": {
          "forms": [
            {
              "description": "For each element in the array, performs the specified code. The [[TLO:ForEach|ForEach Top-Level Object]] is used to access the Key or Value for each iteration",
              "parameters": [
                {
                  "name": "command",
                  "type": "string"
                },
                {
                  "optional": true,                  
                  "name": "filterQuery",
                  "type": "jsonvalueref",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "Reverse":{
          "forms": [
            {
              "minimumBuild":7003
            }
          ]
        },
        "Swap":{
          "forms": [
            {
              "minimumBuild":7003,
              "parameters": [
                {
                  "type":"int64",
                  "name": "keyA"
                },
                {
                  "type":"int64",
                  "name":"keyB"
                }
              ]
            }
          ]
        }
      },
      "index": {
        "forms": [
          {
            "type": "object",
            "parameters": [
              {
                "name": "fieldPath",
                "type": "string",
                "greedy": true
              }
            ]
          }
        ]
      },
      "staticMembers": {
        "New":{
          "forms": [
            {
              "minimumBuild":7025,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"string",
                  "name": "jsonArray",
                  "optional": true,
                  "default":"[]"
                }
              ]
            }
          ]
        }
      },
      "asString": {
        "description": "JSON representation of the array"
      }
    },
    "jsonobject": {
      "members": {
        "Duplicate":{
          "forms": [
            {
              "type":"jsonobject",
              "minimumBuild":7035,
              "description": "Returns a deep copy (completely new and separate clone) of the object"
            }
          ]
        },
        "Get": {
          "forms": [
            {
              "type": "object",
              "description": "Gets a value stored within this object, by its name",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "object",
              "description": "Gets a stored value multiple levels deep within jsonobjects and/or jsonarrays",
              "parameters": [
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "object",
              "minimumBuild":7042,
              "description": "Gets a stored value multiple levels deep within jsonobjects and/or jsonarrays, with a default value if not found",
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "constant": "-default",
                  "followingParameters": [
                    {
                      "type": "jsonvalue",
                      "name": "defaultValue"
                    }
                  ]
                },
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetContainer": {
          "forms": [
            {
              "minimumBuild":7036,
              "type": "jsonvaluecontainer",
              "description": "Gets a jsonvaluecontainer which holds a value within this object, by its name",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "jsonvaluecontainer",
              "description": "Gets a jsonvaluecontainer multiple levels deep within jsonobjects and/or jsonarrays",
              "parameters": [
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetNumber": {
          "forms": [
            {
              "minimumBuild":6921,
              "type": "float64",
              "description": "Gets a value stored within this object, by its name",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "minimumBuild":6921,
              "type": "float64",
              "description": "Gets a stored value multiple levels deep within jsonobjects and/or jsonarrays",
              "parameters": [
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "float64",
              "minimumBuild":7042,
              "description": "Gets a stored value multiple levels deep within jsonobjects and/or jsonarrays, with a default value if not found",
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "constant": "-default",
                  "followingParameters": [
                    {
                      "type": "jsonvalue",
                      "name": "defaultValue"
                    }
                  ]
                },
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetInteger": {
          "forms": [
            {
              "minimumBuild":6921,
              "type": "int64",
              "description": "Gets a value stored within this object, by its name",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "minimumBuild":6921,
              "type": "int64",
              "description": "Gets a stored value multiple levels deep within jsonobjects and/or jsonarrays",
              "parameters": [
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "int64",
              "minimumBuild":7042,
              "description": "Gets a stored value multiple levels deep within jsonobjects and/or jsonarrays, with a default value if not found",
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "constant": "-default",
                  "followingParameters": [
                    {
                      "type": "jsonvalue",
                      "name": "defaultValue"
                    }
                  ]
                },
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetBool": {
          "forms": [
            {
              "minimumBuild":6921,
              "type": "bool",
              "description": "Gets a value stored within this object, by its name",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "minimumBuild":6921,
              "type": "bool",
              "description": "Gets a stored value multiple levels deep within jsonobjects and/or jsonarrays",
              "parameters": [
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "bool",
              "minimumBuild":7042,
              "description": "Gets a stored value multiple levels deep within jsonobjects and/or jsonarrays, with a default value if not found",
              "parameters": [
                {
                  "optional": true,
                  "type":"string",
                  "constant": "-default",
                  "followingParameters": [
                    {
                      "type": "jsonvalue",
                      "name": "defaultValue"
                    }
                  ]
                },
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "GetType":{
          "forms": [
            {
              "minimumBuild":6952,
              "type": "string",
              "description": "Gets the Type of a value stored within this object, by its name",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Type": {
          "forms": [
            {
              "type": "string"
            }
          ]
        },
        "AsString": {
          "forms": [
            {
              "type": "string"
            }
          ]
        },
        "AsJSON": {
          "forms": [
            {
              "type": "unistring",
              "parameters": [
                {
                  "type": "string",
                  "constant": "multiline",
                  "optional": true
                }
              ]
            }
          ]
        },
        "Value": {
          "forms": [
            {
              "type": "jsonobject"
            }
          ]
        },
        "Has": {
          "forms": [
            {
              "type": "bool",
              "description": "Checks whether a value is stored within this object, by its name",
              "parameters": [
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                }
              ]
            },
            {
              "type": "bool",
              "description": "Checks whether a value is stored, multiple levels deep within jsonobjects and/or jsonarrays",
              "parameters": [
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Assert": {
          "forms": [
            {
              "type": "bool",
              "parameters": [
                {
                  "type": "string",
                  "constant": "-lazy",
                  "optional": true
                },
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                },
                {
                  "name": "matchValue",
                  "type": "jsonvalue"
                }
              ]
            },
            {
              "type": "bool",
              "description": "Checks whether a value is stored within this object AND matches the specified JSON value",
              "parameters": [
                {
                  "name": "valueName"
                },
                {
                  "name": "json"
                }
              ]
            },
            {
              "type": "bool",
              "description": "Checks whether a value is stored, multiple levels deep within jsonobjects and/or jsonarrays, AND matches the specified JSON value",
              "parameters": [
                {
                  "name": "valueName"
                },
                {
                  "name": "valueName2"
                },
                {
                  "type": "string",
                  "greedy": true
                },
                {
                  "name": "json"
                }
              ]
            }
          ]
        },
        "Keys": {
          "forms": [
            {
              "type": "jsonarray",
              "description": "A JSON array containing a list of keys from this object",
              "parameters": [
                {
                  "optional": true,
                  "type":"jsonvalueref",
                  "name": "filterQuery",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "Values": {
          "forms": [
            {
              "type": "jsonarray",
              "description": "A JSON array containing a list of values from this object",
              "parameters": [
                {
                  "optional": true,
                  "type":"jsonvalueref",
                  "name": "filterQuery",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "Used":{
          "forms": [
            {
              "minimumBuild":6952,
              "type":"uint",
              "description": "Number of values contained by the object"
            }
          ]
        },
        "Size":{
          "forms": [
            {
              "minimumBuild":6952,
              "type":"uint",
              "description": "Number of values contained by the object"
            }
          ]
        },
        "SelectKey":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"unistring",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectKeys":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectValue":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"jsonvalue",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "SelectValues":{
          "forms": [
            {
              "minimumBuild":6995,
              "type":"jsonarray",
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name": "query",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "GetIterator": {
          "forms": [
            {
              "description": "Sets a jsoniterator to iterate this JSON object",
              "parameters": [
                {
                  "name": "iteratorObject",
                  "type": "weakref"
                }
              ]
            }
          ]
        },
        "Clear": {
          "forms": [
            {
              "description": "Clears all values from the object"
            }
          ]
        },
        "Set": {
          "forms": [
            {
              "parameters": [
                {
                  "type": "string",
                  "constant": "-lazy",
                  "optional": true
                },
                {
                  "name": "fieldPath",
                  "type": "string",
                  "greedy": true
                },
                {
                  "name": "newValue",
                  "type": "jsonvalue"
                }
              ]
            },
            {
              "description": "Sets a value within the object, to a new JSON value of any type, e.g. <tt>myJsonObject:Set[\"someObject\",\"{\\\"subValue\\\":12}\"]</tt>",
              "parameters": [
                {
                  "type":"string",
                  "name": "key"
                },
                {
                  "name": "newValue",
                  "type":"jsonvalue"
                }
              ]
            }
          ]
        },
        "SetByRef":{
          "forms": [
            {
              "minimumBuild":6921,
              "parameters": [
                {
                  "type":"string",
                  "name":"key"
                },
                {
                  "type":"jsonvalueref",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetString":{
          "forms":[
            {
              "description": "Sets a value within the object, to a new string value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"string",
                  "name":"key"
                },
                {
                  "type":"string",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetInteger":{
          "forms":[
            {
              "description": "Sets a value within the object, to a new integer (int64) value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"string",
                  "name":"key"
                },
                {
                  "type":"int64",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetNumber":{
          "forms":[
            {
              "description": "Sets a value within the object, to a new number (float64) value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"string",
                  "name":"key"
                },
                {
                  "type":"float64",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetBool":{
          "forms":[
            {
              "description": "Sets a value within the object, to a new boolean value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"string",
                  "name":"key"
                },
                {
                  "type":"bool",
                  "name":"newValue"
                }
              ]
            }
          ]
        },
        "SetNULL":{
          "forms":[
            {
              "description": "Sets a value within the object, to a null value",
              "minimumBuild":6899,
              "parameters": [
                {
                  "type":"string",
                  "name":"key"
                }
              ]
            }
          ]
        },
        "Erase": {
          "forms": [
            {
              "description": "Erases the specified value from the object",
              "parameters": [
                {
                  "name": "fieldName",
                  "type": "string"
                }
              ]
            }
          ]
        },
        "EraseByQuery": {
          "forms": [
            {
              "description": "Erases items either matching or not matching the query from the object (depending on the 2nd parameter)",
              "parameters": [
                {
                  "name": "queryText",
                  "type": "string"
                },
                {
                  "name": "removeMatches",
                  "type": "bool",
                  "optional": true,
                  "default": true
                }
              ]
            },
            {
              "description": "Erases items matching the query from the object",
              "parameters": [
                {
                  "name": "ID",
                  "type": "Query"
                }
              ]
            }
          ]
        },
        "WriteFile": {
          "forms": [
            {
              "parameters": [
                {
                  "name": "filePath",
                  "type": "string"
                },
                {
                  "type": "string",
                  "constant": "multiline",
                  "optional": true
                },
                {
                  "name": "lineSplit",
                  "type": "string",
                  "optional": true,
                  "default": "\\r\\n"
                }
              ]
            }
          ]
        },
        "ForEach": {
          "forms": [
            {
              "description": "For each value in the object, performs the specified code. The [[TLO:ForEach|ForEach Top-Level Object]] is used to access the Key or Value for each iteration",
              "parameters": [
                {
                  "name": "command",
                  "type": "string"
                },
                {
                  "optional": true,                  
                  "name": "filterQuery",
                  "type": "jsonvalueref",
                  "schema":{
                    "$ref":"#/definitions/select"
                  }
                }
              ]
            }
          ]
        },
        "Merge":{
          "forms": [
            {
              "minimumBuild":6921,
              "parameters": [
                {
                  "type":"string",
                  "name":"jsonObject"
                },
                {
                  "type":"bool",
                  "name": "replace",
                  "optional": true,
                  "default":true
                }
              ]
            },
            {
              "minimumBuild":6921,
              "parameters": [
                {
                  "type":"jsonvalueref",
                  "name":"jsonObject"
                },
                {
                  "type":"bool",
                  "name": "replace",
                  "optional": true,
                  "default":true
                }
              ]
            }            
          ]
        }
      },
      "index": {
        "forms": [
          {
            "type": "object",
            "parameters": [
              {
                "name": "fieldPath",
                "type": "string",
                "greedy": true
              }
            ]
          }
        ]
      },
      "staticMembers": {
        "New":{
          "forms": [
              {
                  "minimumBuild":7025,
                  "type":"jsonobject",
                  "parameters": [
                    {
                      "type":"string",
                      "name": "jsonObject",
                      "optional": true,
                      "default":"{}"
                    }
                  ]
              }
          ]
        },
        "ParseFile":{
          "forms": [
            {
              "minimumBuild":7025,
              "type":"jsonobject",
              "parameters": [
                {
                  "type":"filepath",
                  "name": "filename"
                }
              ]
            }
          ]
        }
      },
      "asString": {
        "description": "JSON representation of the object"
      }
    },
    "lavishmachine": {
      "static":true,
      "members": {
        "NewTaskManager": {
          "forms": [
            {
              "type": "taskmanager",
              "description": "Creates a new, empty, [[LavishScript:Task Manager|Task Manager]], or provides the existing Task Manager by the given name",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        },
        "NewTaskTypeSet": {
          "forms": [
            {
              "type": "tasktypeset",
              "description": "Creates a new, empty, [[LavishScript:Task Type Set|Task Type Set]]",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        },
        "NewTaskType": {
          "forms": [
            {
              "type": "tasktype",
              "description": "Creates a new [[LavishScript:Task Type|Task Type]] from a supplied JSON object",
              "parameters": [
                {
                  "name": "json"
                }
              ]
            }
          ]
        },
        "NewTaskLibrary": {
          "forms": [
            {
              "type": "tasklibrary",
              "description": "Creates a new, empty, [[LavishScript:Task Library|Task Library]], or provides the existing Task Library by the given name",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        },
        "TaskManager": {
          "forms": [
            {
              "type": "taskmanager",
              "description": "Retrieves a Task Manager by ID",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "TaskTypeSet": {
          "forms": [
            {
              "type": "tasktypeset",
              "description": "Retrieves a Task Type Set by ID",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "TaskType": {
          "forms": [
            {
              "type": "tasktype",
              "description": "Retrieves a Task Type by ID",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "TaskLibrary": {
          "forms": [
            {
              "type": "tasklibrary",
              "description": "Retrieves a Task Library by ID",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        },
        "Task": {
          "forms": [
            {
              "type": "task",
              "description": "Retrieves a running Task by ID",
              "parameters": [
                {
                  "name": "#"
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "LoadPackageFile": {
          "forms": [
            {
              "description": "Loads a [[LavishMachine:Package|LavishMachine Package]] from a file containing a JSON object",
              "parameters": [
                {
                  "name": "filename"
                }
              ]
            }
          ]
        },
        "LoadPackageJSON": {
          "forms": [
            {
              "description": "Loads a [[LavishMachine:Package|LavishMachine Package]] from a supplied JSON object",
              "parameters": [
                {
                  "name": "json"
                }
              ]
            }
          ]
        },
        "LoadTaskTypesFile": {
          "forms": [
            {
              "description": "Loads [[LavishMachine:Task Types|Task Types]] from a file containing a JSON array",
              "parameters": [
                {
                  "name": "filename"
                }
              ]
            }
          ]
        },
        "LoadTaskTypesJSON": {
          "forms": [
            {
              "description": "Loads [[LavishMachine:Task Types|Task Types]] from a supplied JSON array",
              "parameters": [
                {
                  "name": "json"
                }
              ]
            }
          ]
        }
      },
      "persistent": false
    },
    "taskpulseargs": {
      "members": {
        "Task": {
          "forms": [
            {
              "type": "task",
              "description": "The current Task instance to process"
            }
          ]
        },
        "Timestamp": {
          "forms": [
            {
              "type": "int64",
              "description": "Current Timestamp value, as can be compared to task.StartTimestamp and task.LastFrameTimestamp"
            }
          ]
        },
        "ElapsedMS": {
          "forms": [
            {
              "type": "uint",
              "description": "Elapsed time, in milliseconds, since the Task started"
            }
          ]
        },
        "TaskState": {
          "forms": [
            {
              "type": "elmactaskstate",
              "description": "One of Start, Continue, or Stop. This indicates the current state of the Task."
            }
          ]
        },
        "Error": {
          "forms": [
            {
              "type": "unistring",
              "description": "The Error, if any, as would be set by taskpulseargs:SetError"
            }
          ]
        }
      },
      "methods": {
        "SetError": {
          "forms": [
            {
              "description": "Sets error text associated with the Task",
              "parameters": [
                {
                  "name": "text"
                }
              ]
            }
          ]
        }
      }
    },
    "task": {
      "members": {
        "Name": {
          "forms": [
            {
              "type": "string",
              "description": "Name of the Task, if one was provided"
            }
          ]
        },
        "ID": {
          "forms": [
            {
              "type": "int64",
              "description": "ID of the Task"
            }
          ]
        },
        "Type": {
          "forms": [
            {
              "type": "tasktype",
              "description": "Task Type (such as \"ls1.echo\")"
            }
          ]
        },
        "TaskManager": {},
        "Args": {
          "forms": [
            {
              "type": "jsonobject",
              "description": "A copy of the object used to initiate the Task, held for the Tasks lifetime. This object can be modified during use to store additional information."
            },
            {
              "type": "jsonvalue",
              "description": "Shortcut to retrieve a value from Args, e.g. Task.Args[someObject,someValue] is the same as Task.Args.Get[someObject].Get[someValue] or Task.Args.Get[someObject,someValue]",
              "parameters": [
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "Result": {
          "forms": [
            {
              "type": "jsonobject",
              "description": "The Result object produced by the Task (currently unused)"
            },
            {
              "type": "jsonvalue",
              "description": "Shortcut to retrieve a value from Result",
              "parameters": [
                {
                  "type": "string",
                  "greedy": true
                }
              ]
            }
          ]
        },
        "IsRunning": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the Task is currently running."
            }
          ]
        },
        "RunningTime": {
          "forms": [
            {
              "type": "float",
              "description": "Running Time of the Task, in seconds. NULL if the Task is not running."
            }
          ]
        },
        "RunningTimeMS": {
          "forms": [
            {
              "type": "int64",
              "description": "Running Time of the Task, in milliseconds. NULL if the Task is not running."
            }
          ]
        },
        "FrameElapsed": {
          "forms": [
            {
              "type": "float",
              "description": "Amount of time since the previous Task Frame (Pulse of the Task), in seconds. NULL if the Task is not running."
            }
          ]
        },
        "FrameElapsedMS": {
          "forms": [
            {
              "type": "int64",
              "description": "Amount of time since the previous Task Frame (Pulse of the Task), in milliseconds. NULL if the Task is not running."
            }
          ]
        },
        "StartTimestamp": {
          "forms": [
            {
              "type": "int64",
              "description": "The timestamp when the Task was started. NULL if the Task is not running."
            }
          ]
        },
        "LastFrameTimestamp": {
          "forms": [
            {
              "type": "int64",
              "description": "The timestamp of the previous Task Frame (Pulse of the Task). NULL if the Task is not running."
            }
          ]
        },
        "Duration": {
          "forms": [
            {
              "type": "float",
              "description": "The defined duration of the Task, in seconds. NULL if the Task does not have a specified duration."
            }
          ]
        },
        "DurationMS": {
          "forms": [
            {
              "type": "int64",
              "description": "The defined duration of the Task, in milliseconds. NULL if the Task does not have a specified duration."
            }
          ]
        },
        "IsInstant": {
          "forms": [
            {
              "type": "bool",
              "description": "TRUE if the Task is defined as instant"
            }
          ]
        }
      },
      "methods": {
        "Start": {
          "forms": [
            {
              "description": "Start the Task"
            }
          ]
        },
        "Stop": {
          "forms": [
            {
              "description": "Stop the Task"
            }
          ]
        },
        "Toggle": {
          "forms": [
            {
              "description": "Stop or Start the Task"
            }
          ]
        }
      },
      "staticMembers": {
        "Get":{
          "forms": [
            {
              "minimumBuild":7000,
              "type":"task",
              "parameters": [
                {
                  "type":"int64",
                  "name": "id"
                }
              ]
            }
          ]
        }
      }
    },
    "tasktype": {
      "members": {
        "Name": {
          "forms": [
            {
              "type": "string",
              "description": "Name of the Task Type"
            }
          ]
        },
        "ID": {
          "forms": [
            {
              "type": "uint",
              "description": "The ID number assigned to the Task Type"
            }
          ]
        }
      },
      "methods": {
        "Unregister": {
          "forms": [
            {
              "description": "Unregisters the Task Type. The Task Type can no longer be used to begin Tasks"
            }
          ]
        }
      }
    },
    "tasktypeset": {
      "members": {
        "Name": {},
        "ID": {}
      },
      "persistent": false
    },
    "tasklibrary": {
      "members": {
        "Name": {
          "forms": [
            {
              "type": "string",
              "description": "Name of the Task Library"
            }
          ]
        },
        "ID": {
          "forms": [
            {
              "type": "int64",
              "description": "ID of the Task Library"
            }
          ]
        },
        "AsJSON": {},
        "Task": {
          "forms": [
            {
              "type": "jsonvalue",
              "description": "Retrieve the stored JSON object that defines a Task by a given name. Because a Task Library \"is\" a JSON object, .Task[name] does the same as .JSON[name]",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "Clear": {
          "forms": [
            {
              "description": "Clears all Tasks defined in the Task Library"
            }
          ]
        },
        "Destroy": {
          "forms": [
            {
              "description": "Destroys the Task Library, such that it can no longer be found via [[ObjectType:lavishmachine|lavishmachine]].TaskLibrary[name]"
            }
          ]
        },
        "AddTask": {
          "forms": [
            {
              "description": "Adds a new Task by name. A Task is defined by a JSON object. Example:   MyTaskLibrary:AddTask[Hello World,\"{\\\"type\\\":\\\"ls1.echo\\\",\\\"output\\\":\\\"Hello World!\\\"}\"]",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "jsonobject"
                }
              ]
            }
          ]
        },
        "RemoveTask": {
          "forms": [
            {
              "description": "Removes a defined Task by name",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        }
      }
    },
    "taskmanager": {
      "members": {
        "Name": {
          "forms": [
            {
              "type": "string",
              "description": "Name of the Task Manager"
            }
          ]
        },
        "ID": {
          "forms": [
            {
              "type": "uint",
              "description": "The ID number assigned to the Task Manager"
            }
          ]
        },
        "BeginTask": {
          "forms": [
            {
              "type": "task",
              "description": "Begins a Task via the provided JSON object, e.g. <tt>TaskManager:BeginTask[\"{\\\"type\\\":\\\"ls1.echo\\\",\\\"output\\\":\\\"Hello World!\\\"}\"]</tt>",
              "parameters": [
                {
                  "name": "jsonobject"
                }
              ]
            }
          ]
        },
        "BeginTaskLibrary": {
          "forms": [
            {
              "type": "task",
              "description": "Begins every Task in a given Task Library, wrapped in a parallel Task",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        }
      },
      "methods": {
        "SetTaskTypeSet": {},
        "BeginTask": {
          "forms": [
            {
              "description": "Begins a Task via the provided JSON object, e.g. <tt>TaskManager:BeginTask[\"{\\\"type\\\":\\\"ls1.echo\\\",\\\"output\\\":\\\"Hello World!\\\"}\"]</tt>",
              "parameters": [
                {
                  "name": "jsonobject"
                }
              ]
            }
          ]
        },
        "BeginTaskLibrary": {
          "forms": [
            {
              "description": "Begins every Task in a given Task Library, wrapped in a parallel Task",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        },
        "Clear": {
          "forms": [
            {
              "description": "Stops all running Tasks"
            }
          ]
        },
        "Destroy": {
          "forms": [
            {
              "description": "Stops all running Tasks, and destroys the Task Manager itself"
            }
          ]
        },
        "BeginTasksFile": {},
        "BeginTasks": {
          "forms": [
            {
              "description": "Begins every Task in a given JSON array of Task objects",
              "parameters": [
                {
                  "name": "jsonarray"
                }
              ]
            }
          ]
        }
      },
      "staticMembers": {
        "New":{
          "forms": [
            {
                "minimumBuild":7000,
                "type":"taskmanager",
                "parameters": [
                  {
                    "type":"string",
                    "name": "name"
                  }
                ]
            }
          ]
        },
        "Get":{
          "forms": [
            {
                "minimumBuild":7000,
                "type":"taskmanager",
                "parameters": [
                  {
                    "type":"string",
                    "name": "name"
                  }
                ]
            }
          ]
        },
        "List":{
          "forms": [
            {
                "minimumBuild":7000,
                "type":"jsonarray",
                "parameters": [
                  {
                    "type":"jsonvalueref",
                    "name": "filterQuery",
                    "schema":{
                      "$ref":"#/definitions/select"
                    }
                  }
                ]
            }
          ]
        }
      }
    },
    "xmlreader":{
      "minimumBuild":6951,
      "members": {
        "Error":{
          "forms": [
            {
              "type":"string",
              "description": "The error message, if XML parsing failed"
            }
          ]
        },
        "Root":{
          "forms": [
            {
              "type":"xmlnode",
              "description": "A root node that contains the actual XML nodes"
            }
          ]
        }
      },
      "methods": {
        "AddEntity":{
          "forms": [
            {
              "description": "Adds a custom XML Entity with a specified value",
              "parameters": [
                {
                  "type":"string",
                  "name": "entityName"
                },
                {
                  "type":"string",
                  "name": "entityValue"
                }
              ]
            }
          ]
        },
        "Parse":{
          "forms": [
            {
              "description": "Parses XML passed in as a string",
              "parameters": [
                {
                  "type":"string",
                  "name": "xml"
                }
              ]
            }
          ]
        },
        "ParseFile":{
          "forms": [
            {
              "description": "Parses an XML file",
              "parameters": [
                {
                  "type":"string",
                  "name": "filename"
                }
              ]
            }
          ]
        },
        "Reset":{
          "forms": [
            {
              "description": "Resets the XML reader to its ready state, removing any previously loaded nodes"
            }
          ]
        }
      },
      "initializer": {
        "forms": [
          {
            
          }
        ]
      },
      "asString": {
        "constant": "xmlreader"
      }
    },
    "xmlnode":{
      "minimumBuild":6951,
      "members": {
        "Type":{
          "forms": [
            {
              "type":"string",
              "description": "Type of XML node, one of \"NONE\", \"ELEMENT\", \"COMMENT\", \"TEXT\", \"PI\". Mostly ELEMENT and TEXT."
            }
          ]
        },
        "Text":{
          "forms": [
            {
              "type":"string",
              "description": "The text contained by the XML node. For an ELEMENT type, this is the XML tag, e.g. \"xyz\" from \"<xyz>abc</xyz>\"; the \"abc\" would then be a TEXT Child."
            }
          ]
        },    
        "Parent":{
          "forms": [
            {
              "type":"xmlnode",
              "description": "The parent node in the XML tree"
            }
          ]
        },
        "Child":{
          "forms": [
            {
              "type":"xmlnode",
              "description": "The first child of this node"
            }
          ]
        },
        "LastChild":{
          "forms": [
            {
              "type":"xmlnode",
              "description": "The last child of this node"
            }
          ]
        },
        "Next":{
          "forms": [
            {
              "type":"xmlnode",
              "description": "The next sibling of this node"
            }
          ]
        },
        "Previous":{
          "forms": [
            {
              "type":"xmlnode",
              "description": "The previous sibling of this node"
            }
          ]
        },        
        "FindChildElement":{
          "forms": [
            {
              "description": "Finds the first child ELEMENT node by name (xml tag)",
              "parameters": [
                {
                  "type":"string",
                  "name": "name"
                }
              ]
            }
          ]
        },
        "FindNextChildElement":{
          "forms": [
            {
              "description": "Finds the next child ELEMENT node by name (xml tag), from a specified node",
              "parameters": [
                {
                  "type":"weakref",
                  "name": "fromNode"
                },
                {
                  "type":"string",
                  "name": "name"
                }
              ]
            }
          ]
        },    
        "Leaf":{
          "forms": [
            {
              "minimumBuild":6964,
              "type":"bool"
            }
          ]
        },
        "Attributes":{          
          "forms": [
            {
              "description": "A jsonarray of the attributes and their values",
              "type":"jsonarray"
            }
          ]
        },
        "AsJSON":{
          "forms": [
            {
              "description": "A JSON representation of this element. If includeDescendants is specified, this will include all descendant nodes.",
              "type":"jsonobject",
              "parameters": [
                {
                  "type":"bool",
                  "optional": true,
                  "default":false,
                  "name": "includeDescendants"
                }
              ]

            }
          ]
        }
      },
      "methods": {
        "ForEach":{
          "forms": [
            {
              "description": "For each child xmlnode, performs the specified code. The [[TLO:ForEach|ForEach Top-Level Object]] is used to access the Key or Value for each iteration",
              "parameters": [
                {
                  "name": "command",
                  "type": "string"
                }
              ]
            },
            {
              "description": "For each child ELEMENT xmlnode matching the specified elementName (tag), performs the specified code. The [[TLO:ForEach|ForEach Top-Level Object]] is used to access the Key or Value for each iteration",
              "parameters": [
                {
                  "name":"elementName",
                  "type":"string"
                },
                {
                  "name": "command",
                  "type": "string"
                }
              ]
            }
          ]
        }
      },
      "asString": {
        "member": "Text"
      }
    }
  },
  "topLevelObjects": {
    "Type": {
      "forms": [
        {
          "type": "type",
          "parameters": [
            {
              "name": "typeName",
              "type": "string"
            }
          ]
        }
      ]
    },
    "Int": {
      "forms": [
        {
          "type": "int",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        }
      ]
    },
    "Int64": {
      "forms": [
        {
          "type": "int64",
          "parameters": [
            {
              "name": "value",
              "type": "int64"
            }
          ]
        }
      ]
    },
    "String": {
      "forms": [
        {
          "type": "string",
          "parameters": [
            {
              "name": "value",
              "type": "string"
            }
          ]
        }
      ]
    },
    "Float": {
      "forms": [
        {
          "type": "int",
          "parameters": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        }
      ]
    },
    "Bool": {
      "forms": [
        {
          "type": "bool",
          "parameters": [
            {
              "name": "value",
              "type": "bool"
            }
          ]
        }
      ]
    },
    "If": {
      "forms": [
        {
          "type": "string",
          "description": "If `condition` is non-zero, results in `trueValue`, otherwise `falseValue`",
          "parameters": [
            {
              "name": "condition",
              "type": "float64"
            },
            {
              "name": "trueValue",
              "type": "string"
            },
            {
              "name": "falseValue",
              "type": "string",
              "optional": true,
              "default": ""
            }
          ]
        }
      ]
    },
    "Time": {
      "forms": [
        {
          "type": "time",
          "description": "The current local date/time"
        }
      ]
    },
    "Enum": {
      "forms": [
        {
          "type": "enumtype",
          "parameters": [
            {
              "name": "enumName",
              "type": "string"
            }
          ]
        }
      ]
    },
    "ForEach": {
      "forms": [
        {
          "type": "keyvaluepair",
          "description": "Current Key,Value in a currently-executing ForEach"
        }
      ]
    },
    "Return": {
      "forms": [
        {
          "type": "object",
          "description": "The returned value from the last Call, from the current script"
        }
      ]
    },
    "Returning": {
      "forms": [
        {
          "type": "object",
          "description": "The instantiated object to be returned from the current function/member"
        }
      ]
    },
    "Variable": {
      "forms": [
        {
          "type": "object",
          "parameters": [
            {
              "name": "descriptor",
              "type": "string",
              "description": "The variable to find"
            }
          ]
        }
      ]
    },
    "QueuedCommands": {
      "forms": [
        {
          "type": "bool",
          "description": "TRUE if commands are currently queued for the current script"
        },
        {
          "type": "bool",
          "description": "TRUE if commands containing the `commandSubstring` are currently queued for the current script",
          "parameters": [
            {
              "name": "commandSubstring",
              "type": "string"
            }
          ]
        }
      ]
    },
    "Arg": {
      "forms": [
        {
          "type": "string",
          "parameters": [
            {
              "name": "numArg",
              "type": "uint"
            },
            {
              "name": "args",
              "type": "string",
              "greedy": true
            }
          ]
        }
      ]
    },
    "Script": {
      "forms": [
        {
          "type": "script",
          "description": "Currently executing script, if any"
        },
        {
          "type": "script",
          "parameters": [
            {
              "name": "scriptFile",
              "type": "string"
            }
          ]
        }
      ]
    },
    "Function": {
      "forms": [
        {
          "type": "function",
          "description": "Currently executing function, from the current Script, if any"
        }
      ]
    },
    "Execute": {
      "forms": [
        {
          "type": "int",
          "parameters": [
            {
              "name": "command",
              "type": "string"
            }
          ]
        }
      ]
    },
    "Select": {
      "forms": [
        {
          "type": "int",
          "description": "Finds the index of a value within `haystack` matching `needle`",
          "parameters": [
            {
              "name": "needle",
              "type": "string"
            },
            {
              "name": "haystack",
              "type": "string",
              "greedy": true
            }
          ]
        },
        {
          "minimumBuild":7000,
          "type":"object",
          "description": "The object currently being tested within a LavishScript Select query (not to be confused with the other form of this TLO)"
        }
      ]
    },
    "This": {
      "forms": [
        {
          "type": "weakref"
        },
        {
          "type": "weakref",
          "parameters": [
            {
              "type": "string",
              "constant": "parent"
            }
          ]
        }
      ]
    },
    "Event": {
      "forms": [
        {
          "type": "event",
          "parameters": [
            {
              "name": "eventID",
              "type": "uint"
            }
          ]
        },
        {
          "type": "event",
          "parameters": [
            {
              "name": "eventName",
              "type": "string"
            }
          ]
        }
      ]
    },
    "WaitFor": {
      "forms": [
        {
          "type": "int",
          "description": "The last WaitFor result, from the currently executing script"
        }
      ]
    },
    "VariableScope": {
      "forms": [
        {
          "type": "variablescope",
          "description": "The current local Variable Scope for the currently executing script if there is one, otherwise the global Variable Scope"
        }
      ]
    },
    "PersistentObject": {
      "forms": [
        {
          "type": "weakref",
          "parameters": [
            {
              "name": "handle",
              "type": "uint"
            }
          ]
        }
      ]
    },
    "Query": {
      "forms": [
        {
          "type": "bool",
          "parameters": [
            {
              "name": "obj",
              "type": "object"
            },
            {
              "name": "expression",
              "type": "string"
            }
          ]
        }
      ]
    },
    "LMAC": {
      "forms": [
        {
          "type": "lavishmachine"
        }
      ]
    },
    "Math": {
      "forms": [
        {
          "type": "math"
        }
      ]
    },
    "System": {
      "forms": [
        {
          "type": "system"
        }
      ]
    },
    "LavishScript": {
      "forms": [
        {
          "type": "lavishscript"
        }
      ]
    }
  }
}